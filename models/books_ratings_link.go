// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksRatingsLink is an object representing the database table.
type BooksRatingsLink struct {
	ID     null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book   int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Rating int64      `boil:"rating" json:"rating" toml:"rating" yaml:"rating"`

	R *booksRatingsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksRatingsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksRatingsLinkColumns = struct {
	ID     string
	Book   string
	Rating string
}{
	ID:     "id",
	Book:   "book",
	Rating: "rating",
}

var BooksRatingsLinkTableColumns = struct {
	ID     string
	Book   string
	Rating string
}{
	ID:     "books_ratings_link.id",
	Book:   "books_ratings_link.book",
	Rating: "books_ratings_link.rating",
}

// Generated where

var BooksRatingsLinkWhere = struct {
	ID     whereHelpernull_Int64
	Book   whereHelperint64
	Rating whereHelperint64
}{
	ID:     whereHelpernull_Int64{field: "\"books_ratings_link\".\"id\""},
	Book:   whereHelperint64{field: "\"books_ratings_link\".\"book\""},
	Rating: whereHelperint64{field: "\"books_ratings_link\".\"rating\""},
}

// BooksRatingsLinkRels is where relationship names are stored.
var BooksRatingsLinkRels = struct {
}{}

// booksRatingsLinkR is where relationships are stored.
type booksRatingsLinkR struct {
}

// NewStruct creates a new relationship struct
func (*booksRatingsLinkR) NewStruct() *booksRatingsLinkR {
	return &booksRatingsLinkR{}
}

// booksRatingsLinkL is where Load methods for each relationship are stored.
type booksRatingsLinkL struct{}

var (
	booksRatingsLinkAllColumns            = []string{"id", "book", "rating"}
	booksRatingsLinkColumnsWithoutDefault = []string{"book", "rating"}
	booksRatingsLinkColumnsWithDefault    = []string{"id"}
	booksRatingsLinkPrimaryKeyColumns     = []string{"id"}
	booksRatingsLinkGeneratedColumns      = []string{"id"}
)

type (
	// BooksRatingsLinkSlice is an alias for a slice of pointers to BooksRatingsLink.
	// This should almost always be used instead of []BooksRatingsLink.
	BooksRatingsLinkSlice []*BooksRatingsLink
	// BooksRatingsLinkHook is the signature for custom BooksRatingsLink hook methods
	BooksRatingsLinkHook func(context.Context, boil.ContextExecutor, *BooksRatingsLink) error

	booksRatingsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksRatingsLinkType                 = reflect.TypeOf(&BooksRatingsLink{})
	booksRatingsLinkMapping              = queries.MakeStructMapping(booksRatingsLinkType)
	booksRatingsLinkPrimaryKeyMapping, _ = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, booksRatingsLinkPrimaryKeyColumns)
	booksRatingsLinkInsertCacheMut       sync.RWMutex
	booksRatingsLinkInsertCache          = make(map[string]insertCache)
	booksRatingsLinkUpdateCacheMut       sync.RWMutex
	booksRatingsLinkUpdateCache          = make(map[string]updateCache)
	booksRatingsLinkUpsertCacheMut       sync.RWMutex
	booksRatingsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksRatingsLinkAfterSelectMu sync.Mutex
var booksRatingsLinkAfterSelectHooks []BooksRatingsLinkHook

var booksRatingsLinkBeforeInsertMu sync.Mutex
var booksRatingsLinkBeforeInsertHooks []BooksRatingsLinkHook
var booksRatingsLinkAfterInsertMu sync.Mutex
var booksRatingsLinkAfterInsertHooks []BooksRatingsLinkHook

var booksRatingsLinkBeforeUpdateMu sync.Mutex
var booksRatingsLinkBeforeUpdateHooks []BooksRatingsLinkHook
var booksRatingsLinkAfterUpdateMu sync.Mutex
var booksRatingsLinkAfterUpdateHooks []BooksRatingsLinkHook

var booksRatingsLinkBeforeDeleteMu sync.Mutex
var booksRatingsLinkBeforeDeleteHooks []BooksRatingsLinkHook
var booksRatingsLinkAfterDeleteMu sync.Mutex
var booksRatingsLinkAfterDeleteHooks []BooksRatingsLinkHook

var booksRatingsLinkBeforeUpsertMu sync.Mutex
var booksRatingsLinkBeforeUpsertHooks []BooksRatingsLinkHook
var booksRatingsLinkAfterUpsertMu sync.Mutex
var booksRatingsLinkAfterUpsertHooks []BooksRatingsLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksRatingsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksRatingsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksRatingsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksRatingsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksRatingsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksRatingsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksRatingsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksRatingsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksRatingsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksRatingsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksRatingsLinkHook registers your hook function for all future operations.
func AddBooksRatingsLinkHook(hookPoint boil.HookPoint, booksRatingsLinkHook BooksRatingsLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksRatingsLinkAfterSelectMu.Lock()
		booksRatingsLinkAfterSelectHooks = append(booksRatingsLinkAfterSelectHooks, booksRatingsLinkHook)
		booksRatingsLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksRatingsLinkBeforeInsertMu.Lock()
		booksRatingsLinkBeforeInsertHooks = append(booksRatingsLinkBeforeInsertHooks, booksRatingsLinkHook)
		booksRatingsLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksRatingsLinkAfterInsertMu.Lock()
		booksRatingsLinkAfterInsertHooks = append(booksRatingsLinkAfterInsertHooks, booksRatingsLinkHook)
		booksRatingsLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksRatingsLinkBeforeUpdateMu.Lock()
		booksRatingsLinkBeforeUpdateHooks = append(booksRatingsLinkBeforeUpdateHooks, booksRatingsLinkHook)
		booksRatingsLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksRatingsLinkAfterUpdateMu.Lock()
		booksRatingsLinkAfterUpdateHooks = append(booksRatingsLinkAfterUpdateHooks, booksRatingsLinkHook)
		booksRatingsLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksRatingsLinkBeforeDeleteMu.Lock()
		booksRatingsLinkBeforeDeleteHooks = append(booksRatingsLinkBeforeDeleteHooks, booksRatingsLinkHook)
		booksRatingsLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksRatingsLinkAfterDeleteMu.Lock()
		booksRatingsLinkAfterDeleteHooks = append(booksRatingsLinkAfterDeleteHooks, booksRatingsLinkHook)
		booksRatingsLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksRatingsLinkBeforeUpsertMu.Lock()
		booksRatingsLinkBeforeUpsertHooks = append(booksRatingsLinkBeforeUpsertHooks, booksRatingsLinkHook)
		booksRatingsLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksRatingsLinkAfterUpsertMu.Lock()
		booksRatingsLinkAfterUpsertHooks = append(booksRatingsLinkAfterUpsertHooks, booksRatingsLinkHook)
		booksRatingsLinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksRatingsLink record from the query using the global executor.
func (q booksRatingsLinkQuery) OneG(ctx context.Context) (*BooksRatingsLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksRatingsLink record from the query.
func (q booksRatingsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksRatingsLink, error) {
	o := &BooksRatingsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_ratings_link")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksRatingsLink records from the query using the global executor.
func (q booksRatingsLinkQuery) AllG(ctx context.Context) (BooksRatingsLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksRatingsLink records from the query.
func (q booksRatingsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksRatingsLinkSlice, error) {
	var o []*BooksRatingsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksRatingsLink slice")
	}

	if len(booksRatingsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksRatingsLink records in the query using the global executor
func (q booksRatingsLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksRatingsLink records in the query.
func (q booksRatingsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_ratings_link rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksRatingsLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksRatingsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_ratings_link exists")
	}

	return count > 0, nil
}

// BooksRatingsLinks retrieves all the records using an executor.
func BooksRatingsLinks(mods ...qm.QueryMod) booksRatingsLinkQuery {
	mods = append(mods, qm.From("\"books_ratings_link\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_ratings_link\".*"})
	}

	return booksRatingsLinkQuery{q}
}

// FindBooksRatingsLinkG retrieves a single record by ID.
func FindBooksRatingsLinkG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksRatingsLink, error) {
	return FindBooksRatingsLink(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksRatingsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksRatingsLink(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksRatingsLink, error) {
	booksRatingsLinkObj := &BooksRatingsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_ratings_link\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksRatingsLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_ratings_link")
	}

	if err = booksRatingsLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksRatingsLinkObj, err
	}

	return booksRatingsLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksRatingsLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksRatingsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_ratings_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksRatingsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksRatingsLinkInsertCacheMut.RLock()
	cache, cached := booksRatingsLinkInsertCache[key]
	booksRatingsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksRatingsLinkAllColumns,
			booksRatingsLinkColumnsWithDefault,
			booksRatingsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksRatingsLinkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_ratings_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_ratings_link\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_ratings_link")
	}

	if !cached {
		booksRatingsLinkInsertCacheMut.Lock()
		booksRatingsLinkInsertCache[key] = cache
		booksRatingsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksRatingsLink record using the global executor.
// See Update for more documentation.
func (o *BooksRatingsLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksRatingsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksRatingsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksRatingsLinkUpdateCacheMut.RLock()
	cache, cached := booksRatingsLinkUpdateCache[key]
	booksRatingsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksRatingsLinkAllColumns,
			booksRatingsLinkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksRatingsLinkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_ratings_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_ratings_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksRatingsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, append(wl, booksRatingsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_ratings_link row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_ratings_link")
	}

	if !cached {
		booksRatingsLinkUpdateCacheMut.Lock()
		booksRatingsLinkUpdateCache[key] = cache
		booksRatingsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksRatingsLinkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksRatingsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_ratings_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_ratings_link")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksRatingsLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksRatingsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksRatingsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_ratings_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksRatingsLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksRatingsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksRatingsLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksRatingsLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksRatingsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_ratings_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksRatingsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksRatingsLinkUpsertCacheMut.RLock()
	cache, cached := booksRatingsLinkUpsertCache[key]
	booksRatingsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksRatingsLinkAllColumns,
			booksRatingsLinkColumnsWithDefault,
			booksRatingsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksRatingsLinkAllColumns,
			booksRatingsLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_ratings_link, could not build update column list")
		}

		ret := strmangle.SetComplement(booksRatingsLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksRatingsLinkPrimaryKeyColumns))
			copy(conflict, booksRatingsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_ratings_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksRatingsLinkType, booksRatingsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_ratings_link")
	}

	if !cached {
		booksRatingsLinkUpsertCacheMut.Lock()
		booksRatingsLinkUpsertCache[key] = cache
		booksRatingsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksRatingsLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksRatingsLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksRatingsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksRatingsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksRatingsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksRatingsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"books_ratings_link\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_ratings_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_ratings_link")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksRatingsLinkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksRatingsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksRatingsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_ratings_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_ratings_link")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksRatingsLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksRatingsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksRatingsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksRatingsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_ratings_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksRatingsLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksRatingsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_ratings_link")
	}

	if len(booksRatingsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksRatingsLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksRatingsLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksRatingsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksRatingsLink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksRatingsLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksRatingsLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksRatingsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksRatingsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksRatingsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_ratings_link\".* FROM \"books_ratings_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksRatingsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksRatingsLinkSlice")
	}

	*o = slice

	return nil
}

// BooksRatingsLinkExistsG checks if the BooksRatingsLink row exists.
func BooksRatingsLinkExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksRatingsLinkExists(ctx, boil.GetContextDB(), iD)
}

// BooksRatingsLinkExists checks if the BooksRatingsLink row exists.
func BooksRatingsLinkExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_ratings_link\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_ratings_link exists")
	}

	return exists, nil
}

// Exists checks if the BooksRatingsLink row exists.
func (o *BooksRatingsLink) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksRatingsLinkExists(ctx, exec, o.ID)
}
