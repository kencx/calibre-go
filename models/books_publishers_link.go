// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksPublishersLink is an object representing the database table.
type BooksPublishersLink struct {
	ID        null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book      int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Publisher int64      `boil:"publisher" json:"publisher" toml:"publisher" yaml:"publisher"`

	R *booksPublishersLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksPublishersLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksPublishersLinkColumns = struct {
	ID        string
	Book      string
	Publisher string
}{
	ID:        "id",
	Book:      "book",
	Publisher: "publisher",
}

var BooksPublishersLinkTableColumns = struct {
	ID        string
	Book      string
	Publisher string
}{
	ID:        "books_publishers_link.id",
	Book:      "books_publishers_link.book",
	Publisher: "books_publishers_link.publisher",
}

// Generated where

var BooksPublishersLinkWhere = struct {
	ID        whereHelpernull_Int64
	Book      whereHelperint64
	Publisher whereHelperint64
}{
	ID:        whereHelpernull_Int64{field: "\"books_publishers_link\".\"id\""},
	Book:      whereHelperint64{field: "\"books_publishers_link\".\"book\""},
	Publisher: whereHelperint64{field: "\"books_publishers_link\".\"publisher\""},
}

// BooksPublishersLinkRels is where relationship names are stored.
var BooksPublishersLinkRels = struct {
}{}

// booksPublishersLinkR is where relationships are stored.
type booksPublishersLinkR struct {
}

// NewStruct creates a new relationship struct
func (*booksPublishersLinkR) NewStruct() *booksPublishersLinkR {
	return &booksPublishersLinkR{}
}

// booksPublishersLinkL is where Load methods for each relationship are stored.
type booksPublishersLinkL struct{}

var (
	booksPublishersLinkAllColumns            = []string{"id", "book", "publisher"}
	booksPublishersLinkColumnsWithoutDefault = []string{"book", "publisher"}
	booksPublishersLinkColumnsWithDefault    = []string{"id"}
	booksPublishersLinkPrimaryKeyColumns     = []string{"id"}
	booksPublishersLinkGeneratedColumns      = []string{"id"}
)

type (
	// BooksPublishersLinkSlice is an alias for a slice of pointers to BooksPublishersLink.
	// This should almost always be used instead of []BooksPublishersLink.
	BooksPublishersLinkSlice []*BooksPublishersLink
	// BooksPublishersLinkHook is the signature for custom BooksPublishersLink hook methods
	BooksPublishersLinkHook func(context.Context, boil.ContextExecutor, *BooksPublishersLink) error

	booksPublishersLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksPublishersLinkType                 = reflect.TypeOf(&BooksPublishersLink{})
	booksPublishersLinkMapping              = queries.MakeStructMapping(booksPublishersLinkType)
	booksPublishersLinkPrimaryKeyMapping, _ = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, booksPublishersLinkPrimaryKeyColumns)
	booksPublishersLinkInsertCacheMut       sync.RWMutex
	booksPublishersLinkInsertCache          = make(map[string]insertCache)
	booksPublishersLinkUpdateCacheMut       sync.RWMutex
	booksPublishersLinkUpdateCache          = make(map[string]updateCache)
	booksPublishersLinkUpsertCacheMut       sync.RWMutex
	booksPublishersLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksPublishersLinkAfterSelectMu sync.Mutex
var booksPublishersLinkAfterSelectHooks []BooksPublishersLinkHook

var booksPublishersLinkBeforeInsertMu sync.Mutex
var booksPublishersLinkBeforeInsertHooks []BooksPublishersLinkHook
var booksPublishersLinkAfterInsertMu sync.Mutex
var booksPublishersLinkAfterInsertHooks []BooksPublishersLinkHook

var booksPublishersLinkBeforeUpdateMu sync.Mutex
var booksPublishersLinkBeforeUpdateHooks []BooksPublishersLinkHook
var booksPublishersLinkAfterUpdateMu sync.Mutex
var booksPublishersLinkAfterUpdateHooks []BooksPublishersLinkHook

var booksPublishersLinkBeforeDeleteMu sync.Mutex
var booksPublishersLinkBeforeDeleteHooks []BooksPublishersLinkHook
var booksPublishersLinkAfterDeleteMu sync.Mutex
var booksPublishersLinkAfterDeleteHooks []BooksPublishersLinkHook

var booksPublishersLinkBeforeUpsertMu sync.Mutex
var booksPublishersLinkBeforeUpsertHooks []BooksPublishersLinkHook
var booksPublishersLinkAfterUpsertMu sync.Mutex
var booksPublishersLinkAfterUpsertHooks []BooksPublishersLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksPublishersLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksPublishersLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksPublishersLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksPublishersLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksPublishersLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksPublishersLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksPublishersLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksPublishersLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksPublishersLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPublishersLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksPublishersLinkHook registers your hook function for all future operations.
func AddBooksPublishersLinkHook(hookPoint boil.HookPoint, booksPublishersLinkHook BooksPublishersLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksPublishersLinkAfterSelectMu.Lock()
		booksPublishersLinkAfterSelectHooks = append(booksPublishersLinkAfterSelectHooks, booksPublishersLinkHook)
		booksPublishersLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksPublishersLinkBeforeInsertMu.Lock()
		booksPublishersLinkBeforeInsertHooks = append(booksPublishersLinkBeforeInsertHooks, booksPublishersLinkHook)
		booksPublishersLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksPublishersLinkAfterInsertMu.Lock()
		booksPublishersLinkAfterInsertHooks = append(booksPublishersLinkAfterInsertHooks, booksPublishersLinkHook)
		booksPublishersLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksPublishersLinkBeforeUpdateMu.Lock()
		booksPublishersLinkBeforeUpdateHooks = append(booksPublishersLinkBeforeUpdateHooks, booksPublishersLinkHook)
		booksPublishersLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksPublishersLinkAfterUpdateMu.Lock()
		booksPublishersLinkAfterUpdateHooks = append(booksPublishersLinkAfterUpdateHooks, booksPublishersLinkHook)
		booksPublishersLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksPublishersLinkBeforeDeleteMu.Lock()
		booksPublishersLinkBeforeDeleteHooks = append(booksPublishersLinkBeforeDeleteHooks, booksPublishersLinkHook)
		booksPublishersLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksPublishersLinkAfterDeleteMu.Lock()
		booksPublishersLinkAfterDeleteHooks = append(booksPublishersLinkAfterDeleteHooks, booksPublishersLinkHook)
		booksPublishersLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksPublishersLinkBeforeUpsertMu.Lock()
		booksPublishersLinkBeforeUpsertHooks = append(booksPublishersLinkBeforeUpsertHooks, booksPublishersLinkHook)
		booksPublishersLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksPublishersLinkAfterUpsertMu.Lock()
		booksPublishersLinkAfterUpsertHooks = append(booksPublishersLinkAfterUpsertHooks, booksPublishersLinkHook)
		booksPublishersLinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksPublishersLink record from the query using the global executor.
func (q booksPublishersLinkQuery) OneG(ctx context.Context) (*BooksPublishersLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksPublishersLink record from the query.
func (q booksPublishersLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksPublishersLink, error) {
	o := &BooksPublishersLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_publishers_link")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksPublishersLink records from the query using the global executor.
func (q booksPublishersLinkQuery) AllG(ctx context.Context) (BooksPublishersLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksPublishersLink records from the query.
func (q booksPublishersLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksPublishersLinkSlice, error) {
	var o []*BooksPublishersLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksPublishersLink slice")
	}

	if len(booksPublishersLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksPublishersLink records in the query using the global executor
func (q booksPublishersLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksPublishersLink records in the query.
func (q booksPublishersLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_publishers_link rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksPublishersLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksPublishersLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_publishers_link exists")
	}

	return count > 0, nil
}

// BooksPublishersLinks retrieves all the records using an executor.
func BooksPublishersLinks(mods ...qm.QueryMod) booksPublishersLinkQuery {
	mods = append(mods, qm.From("\"books_publishers_link\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_publishers_link\".*"})
	}

	return booksPublishersLinkQuery{q}
}

// FindBooksPublishersLinkG retrieves a single record by ID.
func FindBooksPublishersLinkG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksPublishersLink, error) {
	return FindBooksPublishersLink(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksPublishersLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksPublishersLink(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksPublishersLink, error) {
	booksPublishersLinkObj := &BooksPublishersLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_publishers_link\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksPublishersLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_publishers_link")
	}

	if err = booksPublishersLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksPublishersLinkObj, err
	}

	return booksPublishersLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksPublishersLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksPublishersLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_publishers_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksPublishersLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksPublishersLinkInsertCacheMut.RLock()
	cache, cached := booksPublishersLinkInsertCache[key]
	booksPublishersLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksPublishersLinkAllColumns,
			booksPublishersLinkColumnsWithDefault,
			booksPublishersLinkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksPublishersLinkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_publishers_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_publishers_link\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_publishers_link")
	}

	if !cached {
		booksPublishersLinkInsertCacheMut.Lock()
		booksPublishersLinkInsertCache[key] = cache
		booksPublishersLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksPublishersLink record using the global executor.
// See Update for more documentation.
func (o *BooksPublishersLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksPublishersLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksPublishersLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksPublishersLinkUpdateCacheMut.RLock()
	cache, cached := booksPublishersLinkUpdateCache[key]
	booksPublishersLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksPublishersLinkAllColumns,
			booksPublishersLinkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksPublishersLinkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_publishers_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_publishers_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksPublishersLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, append(wl, booksPublishersLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_publishers_link row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_publishers_link")
	}

	if !cached {
		booksPublishersLinkUpdateCacheMut.Lock()
		booksPublishersLinkUpdateCache[key] = cache
		booksPublishersLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksPublishersLinkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksPublishersLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_publishers_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_publishers_link")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksPublishersLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksPublishersLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPublishersLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_publishers_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPublishersLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksPublishersLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksPublishersLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksPublishersLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksPublishersLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_publishers_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksPublishersLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksPublishersLinkUpsertCacheMut.RLock()
	cache, cached := booksPublishersLinkUpsertCache[key]
	booksPublishersLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksPublishersLinkAllColumns,
			booksPublishersLinkColumnsWithDefault,
			booksPublishersLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksPublishersLinkAllColumns,
			booksPublishersLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_publishers_link, could not build update column list")
		}

		ret := strmangle.SetComplement(booksPublishersLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksPublishersLinkPrimaryKeyColumns))
			copy(conflict, booksPublishersLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_publishers_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksPublishersLinkType, booksPublishersLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_publishers_link")
	}

	if !cached {
		booksPublishersLinkUpsertCacheMut.Lock()
		booksPublishersLinkUpsertCache[key] = cache
		booksPublishersLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksPublishersLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksPublishersLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksPublishersLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksPublishersLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksPublishersLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksPublishersLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"books_publishers_link\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_publishers_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_publishers_link")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksPublishersLinkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksPublishersLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksPublishersLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_publishers_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_publishers_link")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksPublishersLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksPublishersLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksPublishersLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPublishersLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_publishers_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPublishersLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksPublishersLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_publishers_link")
	}

	if len(booksPublishersLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksPublishersLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksPublishersLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksPublishersLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksPublishersLink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksPublishersLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksPublishersLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksPublishersLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksPublishersLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPublishersLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_publishers_link\".* FROM \"books_publishers_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPublishersLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksPublishersLinkSlice")
	}

	*o = slice

	return nil
}

// BooksPublishersLinkExistsG checks if the BooksPublishersLink row exists.
func BooksPublishersLinkExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksPublishersLinkExists(ctx, boil.GetContextDB(), iD)
}

// BooksPublishersLinkExists checks if the BooksPublishersLink row exists.
func BooksPublishersLinkExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_publishers_link\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_publishers_link exists")
	}

	return exists, nil
}

// Exists checks if the BooksPublishersLink row exists.
func (o *BooksPublishersLink) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksPublishersLinkExists(ctx, exec, o.ID)
}
