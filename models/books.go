// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Book is an object representing the database table.
type Book struct {
	ID           null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Title        string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Sort         null.String `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
	Timestamp    null.String `boil:"timestamp" json:"timestamp,omitempty" toml:"timestamp" yaml:"timestamp,omitempty"`
	Pubdate      null.String `boil:"pubdate" json:"pubdate,omitempty" toml:"pubdate" yaml:"pubdate,omitempty"`
	SeriesIndex  float64     `boil:"series_index" json:"series_index" toml:"series_index" yaml:"series_index"`
	AuthorSort   null.String `boil:"author_sort" json:"author_sort,omitempty" toml:"author_sort" yaml:"author_sort,omitempty"`
	Isbn         null.String `boil:"isbn" json:"isbn,omitempty" toml:"isbn" yaml:"isbn,omitempty"`
	LCCN         null.String `boil:"lccn" json:"lccn,omitempty" toml:"lccn" yaml:"lccn,omitempty"`
	Path         string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Flags        int64       `boil:"flags" json:"flags" toml:"flags" yaml:"flags"`
	UUID         null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	HasCover     null.String `boil:"has_cover" json:"has_cover,omitempty" toml:"has_cover" yaml:"has_cover,omitempty"`
	LastModified string      `boil:"last_modified" json:"last_modified" toml:"last_modified" yaml:"last_modified"`

	R *bookR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookColumns = struct {
	ID           string
	Title        string
	Sort         string
	Timestamp    string
	Pubdate      string
	SeriesIndex  string
	AuthorSort   string
	Isbn         string
	LCCN         string
	Path         string
	Flags        string
	UUID         string
	HasCover     string
	LastModified string
}{
	ID:           "id",
	Title:        "title",
	Sort:         "sort",
	Timestamp:    "timestamp",
	Pubdate:      "pubdate",
	SeriesIndex:  "series_index",
	AuthorSort:   "author_sort",
	Isbn:         "isbn",
	LCCN:         "lccn",
	Path:         "path",
	Flags:        "flags",
	UUID:         "uuid",
	HasCover:     "has_cover",
	LastModified: "last_modified",
}

var BookTableColumns = struct {
	ID           string
	Title        string
	Sort         string
	Timestamp    string
	Pubdate      string
	SeriesIndex  string
	AuthorSort   string
	Isbn         string
	LCCN         string
	Path         string
	Flags        string
	UUID         string
	HasCover     string
	LastModified string
}{
	ID:           "books.id",
	Title:        "books.title",
	Sort:         "books.sort",
	Timestamp:    "books.timestamp",
	Pubdate:      "books.pubdate",
	SeriesIndex:  "books.series_index",
	AuthorSort:   "books.author_sort",
	Isbn:         "books.isbn",
	LCCN:         "books.lccn",
	Path:         "books.path",
	Flags:        "books.flags",
	UUID:         "books.uuid",
	HasCover:     "books.has_cover",
	LastModified: "books.last_modified",
}

// Generated where

var BookWhere = struct {
	ID           whereHelpernull_Int64
	Title        whereHelperstring
	Sort         whereHelpernull_String
	Timestamp    whereHelpernull_String
	Pubdate      whereHelpernull_String
	SeriesIndex  whereHelperfloat64
	AuthorSort   whereHelpernull_String
	Isbn         whereHelpernull_String
	LCCN         whereHelpernull_String
	Path         whereHelperstring
	Flags        whereHelperint64
	UUID         whereHelpernull_String
	HasCover     whereHelpernull_String
	LastModified whereHelperstring
}{
	ID:           whereHelpernull_Int64{field: "\"books\".\"id\""},
	Title:        whereHelperstring{field: "\"books\".\"title\""},
	Sort:         whereHelpernull_String{field: "\"books\".\"sort\""},
	Timestamp:    whereHelpernull_String{field: "\"books\".\"timestamp\""},
	Pubdate:      whereHelpernull_String{field: "\"books\".\"pubdate\""},
	SeriesIndex:  whereHelperfloat64{field: "\"books\".\"series_index\""},
	AuthorSort:   whereHelpernull_String{field: "\"books\".\"author_sort\""},
	Isbn:         whereHelpernull_String{field: "\"books\".\"isbn\""},
	LCCN:         whereHelpernull_String{field: "\"books\".\"lccn\""},
	Path:         whereHelperstring{field: "\"books\".\"path\""},
	Flags:        whereHelperint64{field: "\"books\".\"flags\""},
	UUID:         whereHelpernull_String{field: "\"books\".\"uuid\""},
	HasCover:     whereHelpernull_String{field: "\"books\".\"has_cover\""},
	LastModified: whereHelperstring{field: "\"books\".\"last_modified\""},
}

// BookRels is where relationship names are stored.
var BookRels = struct {
}{}

// bookR is where relationships are stored.
type bookR struct {
}

// NewStruct creates a new relationship struct
func (*bookR) NewStruct() *bookR {
	return &bookR{}
}

// bookL is where Load methods for each relationship are stored.
type bookL struct{}

var (
	bookAllColumns            = []string{"id", "title", "sort", "timestamp", "pubdate", "series_index", "author_sort", "isbn", "lccn", "path", "flags", "uuid", "has_cover", "last_modified"}
	bookColumnsWithoutDefault = []string{}
	bookColumnsWithDefault    = []string{"id", "title", "sort", "timestamp", "pubdate", "series_index", "author_sort", "isbn", "lccn", "path", "flags", "uuid", "has_cover", "last_modified"}
	bookPrimaryKeyColumns     = []string{"id"}
	bookGeneratedColumns      = []string{"id"}
)

type (
	// BookSlice is an alias for a slice of pointers to Book.
	// This should almost always be used instead of []Book.
	BookSlice []*Book
	// BookHook is the signature for custom Book hook methods
	BookHook func(context.Context, boil.ContextExecutor, *Book) error

	bookQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookType                 = reflect.TypeOf(&Book{})
	bookMapping              = queries.MakeStructMapping(bookType)
	bookPrimaryKeyMapping, _ = queries.BindMapping(bookType, bookMapping, bookPrimaryKeyColumns)
	bookInsertCacheMut       sync.RWMutex
	bookInsertCache          = make(map[string]insertCache)
	bookUpdateCacheMut       sync.RWMutex
	bookUpdateCache          = make(map[string]updateCache)
	bookUpsertCacheMut       sync.RWMutex
	bookUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookAfterSelectMu sync.Mutex
var bookAfterSelectHooks []BookHook

var bookBeforeInsertMu sync.Mutex
var bookBeforeInsertHooks []BookHook
var bookAfterInsertMu sync.Mutex
var bookAfterInsertHooks []BookHook

var bookBeforeUpdateMu sync.Mutex
var bookBeforeUpdateHooks []BookHook
var bookAfterUpdateMu sync.Mutex
var bookAfterUpdateHooks []BookHook

var bookBeforeDeleteMu sync.Mutex
var bookBeforeDeleteHooks []BookHook
var bookAfterDeleteMu sync.Mutex
var bookAfterDeleteHooks []BookHook

var bookBeforeUpsertMu sync.Mutex
var bookBeforeUpsertHooks []BookHook
var bookAfterUpsertMu sync.Mutex
var bookAfterUpsertHooks []BookHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Book) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Book) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Book) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Book) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Book) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Book) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Book) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Book) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Book) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookHook registers your hook function for all future operations.
func AddBookHook(hookPoint boil.HookPoint, bookHook BookHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookAfterSelectMu.Lock()
		bookAfterSelectHooks = append(bookAfterSelectHooks, bookHook)
		bookAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookBeforeInsertMu.Lock()
		bookBeforeInsertHooks = append(bookBeforeInsertHooks, bookHook)
		bookBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookAfterInsertMu.Lock()
		bookAfterInsertHooks = append(bookAfterInsertHooks, bookHook)
		bookAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookBeforeUpdateMu.Lock()
		bookBeforeUpdateHooks = append(bookBeforeUpdateHooks, bookHook)
		bookBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookAfterUpdateMu.Lock()
		bookAfterUpdateHooks = append(bookAfterUpdateHooks, bookHook)
		bookAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookBeforeDeleteMu.Lock()
		bookBeforeDeleteHooks = append(bookBeforeDeleteHooks, bookHook)
		bookBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookAfterDeleteMu.Lock()
		bookAfterDeleteHooks = append(bookAfterDeleteHooks, bookHook)
		bookAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookBeforeUpsertMu.Lock()
		bookBeforeUpsertHooks = append(bookBeforeUpsertHooks, bookHook)
		bookBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookAfterUpsertMu.Lock()
		bookAfterUpsertHooks = append(bookAfterUpsertHooks, bookHook)
		bookAfterUpsertMu.Unlock()
	}
}

// OneG returns a single book record from the query using the global executor.
func (q bookQuery) OneG(ctx context.Context) (*Book, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single book record from the query.
func (q bookQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Book, error) {
	o := &Book{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Book records from the query using the global executor.
func (q bookQuery) AllG(ctx context.Context) (BookSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Book records from the query.
func (q bookQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookSlice, error) {
	var o []*Book

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Book slice")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Book records in the query using the global executor
func (q bookQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Book records in the query.
func (q bookQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bookQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bookQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books exists")
	}

	return count > 0, nil
}

// Books retrieves all the records using an executor.
func Books(mods ...qm.QueryMod) bookQuery {
	mods = append(mods, qm.From("\"books\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books\".*"})
	}

	return bookQuery{q}
}

// FindBookG retrieves a single record by ID.
func FindBookG(ctx context.Context, iD null.Int64, selectCols ...string) (*Book, error) {
	return FindBook(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBook retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBook(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Book, error) {
	bookObj := &Book{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bookObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books")
	}

	if err = bookObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookObj, err
	}

	return bookObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Book) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Book) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookInsertCacheMut.RLock()
	cache, cached := bookInsertCache[key]
	bookInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookAllColumns,
			bookColumnsWithDefault,
			bookColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, bookGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookType, bookMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books")
	}

	if !cached {
		bookInsertCacheMut.Lock()
		bookInsertCache[key] = cache
		bookInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Book record using the global executor.
// See Update for more documentation.
func (o *Book) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Book.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Book) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookUpdateCacheMut.RLock()
	cache, cached := bookUpdateCache[key]
	bookUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookAllColumns,
			bookPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, bookGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bookPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, append(wl, bookPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books")
	}

	if !cached {
		bookUpdateCacheMut.Lock()
		bookUpdateCache[key] = cache
		bookUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bookQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bookQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BookSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in book slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all book")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Book) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Book) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookUpsertCacheMut.RLock()
	cache, cached := bookUpsertCache[key]
	bookUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookAllColumns,
			bookColumnsWithDefault,
			bookColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookAllColumns,
			bookPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books, could not build update column list")
		}

		ret := strmangle.SetComplement(bookAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookPrimaryKeyColumns))
			copy(conflict, bookPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookType, bookMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookType, bookMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books")
	}

	if !cached {
		bookUpsertCacheMut.Lock()
		bookUpsertCache[key] = cache
		bookUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Book record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Book) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Book record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Book) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Book provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookPrimaryKeyMapping)
	sql := "DELETE FROM \"books\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q bookQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bookQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BookSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from book slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books")
	}

	if len(bookAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Book) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Book provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Book) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBook(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BookSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books\".* FROM \"books\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bookPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookSlice")
	}

	*o = slice

	return nil
}

// BookExistsG checks if the Book row exists.
func BookExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BookExists(ctx, boil.GetContextDB(), iD)
}

// BookExists checks if the Book row exists.
func BookExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books exists")
	}

	return exists, nil
}

// Exists checks if the Book row exists.
func (o *Book) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookExists(ctx, exec, o.ID)
}
