// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksAuthorsLink is an object representing the database table.
type BooksAuthorsLink struct {
	ID     null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book   int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Author int64      `boil:"author" json:"author" toml:"author" yaml:"author"`

	R *booksAuthorsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksAuthorsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksAuthorsLinkColumns = struct {
	ID     string
	Book   string
	Author string
}{
	ID:     "id",
	Book:   "book",
	Author: "author",
}

var BooksAuthorsLinkTableColumns = struct {
	ID     string
	Book   string
	Author string
}{
	ID:     "books_authors_link.id",
	Book:   "books_authors_link.book",
	Author: "books_authors_link.author",
}

// Generated where

var BooksAuthorsLinkWhere = struct {
	ID     whereHelpernull_Int64
	Book   whereHelperint64
	Author whereHelperint64
}{
	ID:     whereHelpernull_Int64{field: "\"books_authors_link\".\"id\""},
	Book:   whereHelperint64{field: "\"books_authors_link\".\"book\""},
	Author: whereHelperint64{field: "\"books_authors_link\".\"author\""},
}

// BooksAuthorsLinkRels is where relationship names are stored.
var BooksAuthorsLinkRels = struct {
}{}

// booksAuthorsLinkR is where relationships are stored.
type booksAuthorsLinkR struct {
}

// NewStruct creates a new relationship struct
func (*booksAuthorsLinkR) NewStruct() *booksAuthorsLinkR {
	return &booksAuthorsLinkR{}
}

// booksAuthorsLinkL is where Load methods for each relationship are stored.
type booksAuthorsLinkL struct{}

var (
	booksAuthorsLinkAllColumns            = []string{"id", "book", "author"}
	booksAuthorsLinkColumnsWithoutDefault = []string{"book", "author"}
	booksAuthorsLinkColumnsWithDefault    = []string{"id"}
	booksAuthorsLinkPrimaryKeyColumns     = []string{"id"}
	booksAuthorsLinkGeneratedColumns      = []string{"id"}
)

type (
	// BooksAuthorsLinkSlice is an alias for a slice of pointers to BooksAuthorsLink.
	// This should almost always be used instead of []BooksAuthorsLink.
	BooksAuthorsLinkSlice []*BooksAuthorsLink
	// BooksAuthorsLinkHook is the signature for custom BooksAuthorsLink hook methods
	BooksAuthorsLinkHook func(context.Context, boil.ContextExecutor, *BooksAuthorsLink) error

	booksAuthorsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksAuthorsLinkType                 = reflect.TypeOf(&BooksAuthorsLink{})
	booksAuthorsLinkMapping              = queries.MakeStructMapping(booksAuthorsLinkType)
	booksAuthorsLinkPrimaryKeyMapping, _ = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, booksAuthorsLinkPrimaryKeyColumns)
	booksAuthorsLinkInsertCacheMut       sync.RWMutex
	booksAuthorsLinkInsertCache          = make(map[string]insertCache)
	booksAuthorsLinkUpdateCacheMut       sync.RWMutex
	booksAuthorsLinkUpdateCache          = make(map[string]updateCache)
	booksAuthorsLinkUpsertCacheMut       sync.RWMutex
	booksAuthorsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksAuthorsLinkAfterSelectMu sync.Mutex
var booksAuthorsLinkAfterSelectHooks []BooksAuthorsLinkHook

var booksAuthorsLinkBeforeInsertMu sync.Mutex
var booksAuthorsLinkBeforeInsertHooks []BooksAuthorsLinkHook
var booksAuthorsLinkAfterInsertMu sync.Mutex
var booksAuthorsLinkAfterInsertHooks []BooksAuthorsLinkHook

var booksAuthorsLinkBeforeUpdateMu sync.Mutex
var booksAuthorsLinkBeforeUpdateHooks []BooksAuthorsLinkHook
var booksAuthorsLinkAfterUpdateMu sync.Mutex
var booksAuthorsLinkAfterUpdateHooks []BooksAuthorsLinkHook

var booksAuthorsLinkBeforeDeleteMu sync.Mutex
var booksAuthorsLinkBeforeDeleteHooks []BooksAuthorsLinkHook
var booksAuthorsLinkAfterDeleteMu sync.Mutex
var booksAuthorsLinkAfterDeleteHooks []BooksAuthorsLinkHook

var booksAuthorsLinkBeforeUpsertMu sync.Mutex
var booksAuthorsLinkBeforeUpsertHooks []BooksAuthorsLinkHook
var booksAuthorsLinkAfterUpsertMu sync.Mutex
var booksAuthorsLinkAfterUpsertHooks []BooksAuthorsLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksAuthorsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksAuthorsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksAuthorsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksAuthorsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksAuthorsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksAuthorsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksAuthorsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksAuthorsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksAuthorsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksAuthorsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksAuthorsLinkHook registers your hook function for all future operations.
func AddBooksAuthorsLinkHook(hookPoint boil.HookPoint, booksAuthorsLinkHook BooksAuthorsLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksAuthorsLinkAfterSelectMu.Lock()
		booksAuthorsLinkAfterSelectHooks = append(booksAuthorsLinkAfterSelectHooks, booksAuthorsLinkHook)
		booksAuthorsLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksAuthorsLinkBeforeInsertMu.Lock()
		booksAuthorsLinkBeforeInsertHooks = append(booksAuthorsLinkBeforeInsertHooks, booksAuthorsLinkHook)
		booksAuthorsLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksAuthorsLinkAfterInsertMu.Lock()
		booksAuthorsLinkAfterInsertHooks = append(booksAuthorsLinkAfterInsertHooks, booksAuthorsLinkHook)
		booksAuthorsLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksAuthorsLinkBeforeUpdateMu.Lock()
		booksAuthorsLinkBeforeUpdateHooks = append(booksAuthorsLinkBeforeUpdateHooks, booksAuthorsLinkHook)
		booksAuthorsLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksAuthorsLinkAfterUpdateMu.Lock()
		booksAuthorsLinkAfterUpdateHooks = append(booksAuthorsLinkAfterUpdateHooks, booksAuthorsLinkHook)
		booksAuthorsLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksAuthorsLinkBeforeDeleteMu.Lock()
		booksAuthorsLinkBeforeDeleteHooks = append(booksAuthorsLinkBeforeDeleteHooks, booksAuthorsLinkHook)
		booksAuthorsLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksAuthorsLinkAfterDeleteMu.Lock()
		booksAuthorsLinkAfterDeleteHooks = append(booksAuthorsLinkAfterDeleteHooks, booksAuthorsLinkHook)
		booksAuthorsLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksAuthorsLinkBeforeUpsertMu.Lock()
		booksAuthorsLinkBeforeUpsertHooks = append(booksAuthorsLinkBeforeUpsertHooks, booksAuthorsLinkHook)
		booksAuthorsLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksAuthorsLinkAfterUpsertMu.Lock()
		booksAuthorsLinkAfterUpsertHooks = append(booksAuthorsLinkAfterUpsertHooks, booksAuthorsLinkHook)
		booksAuthorsLinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksAuthorsLink record from the query using the global executor.
func (q booksAuthorsLinkQuery) OneG(ctx context.Context) (*BooksAuthorsLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksAuthorsLink record from the query.
func (q booksAuthorsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksAuthorsLink, error) {
	o := &BooksAuthorsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_authors_link")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksAuthorsLink records from the query using the global executor.
func (q booksAuthorsLinkQuery) AllG(ctx context.Context) (BooksAuthorsLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksAuthorsLink records from the query.
func (q booksAuthorsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksAuthorsLinkSlice, error) {
	var o []*BooksAuthorsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksAuthorsLink slice")
	}

	if len(booksAuthorsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksAuthorsLink records in the query using the global executor
func (q booksAuthorsLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksAuthorsLink records in the query.
func (q booksAuthorsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_authors_link rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksAuthorsLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksAuthorsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_authors_link exists")
	}

	return count > 0, nil
}

// BooksAuthorsLinks retrieves all the records using an executor.
func BooksAuthorsLinks(mods ...qm.QueryMod) booksAuthorsLinkQuery {
	mods = append(mods, qm.From("\"books_authors_link\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_authors_link\".*"})
	}

	return booksAuthorsLinkQuery{q}
}

// FindBooksAuthorsLinkG retrieves a single record by ID.
func FindBooksAuthorsLinkG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksAuthorsLink, error) {
	return FindBooksAuthorsLink(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksAuthorsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksAuthorsLink(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksAuthorsLink, error) {
	booksAuthorsLinkObj := &BooksAuthorsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_authors_link\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksAuthorsLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_authors_link")
	}

	if err = booksAuthorsLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksAuthorsLinkObj, err
	}

	return booksAuthorsLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksAuthorsLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksAuthorsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_authors_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksAuthorsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksAuthorsLinkInsertCacheMut.RLock()
	cache, cached := booksAuthorsLinkInsertCache[key]
	booksAuthorsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksAuthorsLinkAllColumns,
			booksAuthorsLinkColumnsWithDefault,
			booksAuthorsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksAuthorsLinkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_authors_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_authors_link\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_authors_link")
	}

	if !cached {
		booksAuthorsLinkInsertCacheMut.Lock()
		booksAuthorsLinkInsertCache[key] = cache
		booksAuthorsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksAuthorsLink record using the global executor.
// See Update for more documentation.
func (o *BooksAuthorsLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksAuthorsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksAuthorsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksAuthorsLinkUpdateCacheMut.RLock()
	cache, cached := booksAuthorsLinkUpdateCache[key]
	booksAuthorsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksAuthorsLinkAllColumns,
			booksAuthorsLinkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksAuthorsLinkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_authors_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_authors_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksAuthorsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, append(wl, booksAuthorsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_authors_link row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_authors_link")
	}

	if !cached {
		booksAuthorsLinkUpdateCacheMut.Lock()
		booksAuthorsLinkUpdateCache[key] = cache
		booksAuthorsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksAuthorsLinkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksAuthorsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_authors_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_authors_link")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksAuthorsLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksAuthorsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksAuthorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_authors_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksAuthorsLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksAuthorsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksAuthorsLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksAuthorsLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksAuthorsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_authors_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksAuthorsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksAuthorsLinkUpsertCacheMut.RLock()
	cache, cached := booksAuthorsLinkUpsertCache[key]
	booksAuthorsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksAuthorsLinkAllColumns,
			booksAuthorsLinkColumnsWithDefault,
			booksAuthorsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksAuthorsLinkAllColumns,
			booksAuthorsLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_authors_link, could not build update column list")
		}

		ret := strmangle.SetComplement(booksAuthorsLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksAuthorsLinkPrimaryKeyColumns))
			copy(conflict, booksAuthorsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_authors_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksAuthorsLinkType, booksAuthorsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_authors_link")
	}

	if !cached {
		booksAuthorsLinkUpsertCacheMut.Lock()
		booksAuthorsLinkUpsertCache[key] = cache
		booksAuthorsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksAuthorsLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksAuthorsLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksAuthorsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksAuthorsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksAuthorsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksAuthorsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"books_authors_link\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_authors_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_authors_link")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksAuthorsLinkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksAuthorsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksAuthorsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_authors_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_authors_link")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksAuthorsLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksAuthorsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksAuthorsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksAuthorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_authors_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksAuthorsLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksAuthorsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_authors_link")
	}

	if len(booksAuthorsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksAuthorsLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksAuthorsLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksAuthorsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksAuthorsLink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksAuthorsLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksAuthorsLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksAuthorsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksAuthorsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksAuthorsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_authors_link\".* FROM \"books_authors_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksAuthorsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksAuthorsLinkSlice")
	}

	*o = slice

	return nil
}

// BooksAuthorsLinkExistsG checks if the BooksAuthorsLink row exists.
func BooksAuthorsLinkExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksAuthorsLinkExists(ctx, boil.GetContextDB(), iD)
}

// BooksAuthorsLinkExists checks if the BooksAuthorsLink row exists.
func BooksAuthorsLinkExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_authors_link\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_authors_link exists")
	}

	return exists, nil
}

// Exists checks if the BooksAuthorsLink row exists.
func (o *BooksAuthorsLink) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksAuthorsLinkExists(ctx, exec, o.ID)
}
