// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConversionOption is an object representing the database table.
type ConversionOption struct {
	ID     null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Format string     `boil:"format" json:"format" toml:"format" yaml:"format"`
	Book   null.Int64 `boil:"book" json:"book,omitempty" toml:"book" yaml:"book,omitempty"`
	Data   []byte     `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *conversionOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L conversionOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConversionOptionColumns = struct {
	ID     string
	Format string
	Book   string
	Data   string
}{
	ID:     "id",
	Format: "format",
	Book:   "book",
	Data:   "data",
}

var ConversionOptionTableColumns = struct {
	ID     string
	Format string
	Book   string
	Data   string
}{
	ID:     "conversion_options.id",
	Format: "conversion_options.format",
	Book:   "conversion_options.book",
	Data:   "conversion_options.data",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ConversionOptionWhere = struct {
	ID     whereHelpernull_Int64
	Format whereHelperstring
	Book   whereHelpernull_Int64
	Data   whereHelper__byte
}{
	ID:     whereHelpernull_Int64{field: "\"conversion_options\".\"id\""},
	Format: whereHelperstring{field: "\"conversion_options\".\"format\""},
	Book:   whereHelpernull_Int64{field: "\"conversion_options\".\"book\""},
	Data:   whereHelper__byte{field: "\"conversion_options\".\"data\""},
}

// ConversionOptionRels is where relationship names are stored.
var ConversionOptionRels = struct {
}{}

// conversionOptionR is where relationships are stored.
type conversionOptionR struct {
}

// NewStruct creates a new relationship struct
func (*conversionOptionR) NewStruct() *conversionOptionR {
	return &conversionOptionR{}
}

// conversionOptionL is where Load methods for each relationship are stored.
type conversionOptionL struct{}

var (
	conversionOptionAllColumns            = []string{"id", "format", "book", "data"}
	conversionOptionColumnsWithoutDefault = []string{"format", "data"}
	conversionOptionColumnsWithDefault    = []string{"id", "book"}
	conversionOptionPrimaryKeyColumns     = []string{"id"}
	conversionOptionGeneratedColumns      = []string{"id"}
)

type (
	// ConversionOptionSlice is an alias for a slice of pointers to ConversionOption.
	// This should almost always be used instead of []ConversionOption.
	ConversionOptionSlice []*ConversionOption
	// ConversionOptionHook is the signature for custom ConversionOption hook methods
	ConversionOptionHook func(context.Context, boil.ContextExecutor, *ConversionOption) error

	conversionOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	conversionOptionType                 = reflect.TypeOf(&ConversionOption{})
	conversionOptionMapping              = queries.MakeStructMapping(conversionOptionType)
	conversionOptionPrimaryKeyMapping, _ = queries.BindMapping(conversionOptionType, conversionOptionMapping, conversionOptionPrimaryKeyColumns)
	conversionOptionInsertCacheMut       sync.RWMutex
	conversionOptionInsertCache          = make(map[string]insertCache)
	conversionOptionUpdateCacheMut       sync.RWMutex
	conversionOptionUpdateCache          = make(map[string]updateCache)
	conversionOptionUpsertCacheMut       sync.RWMutex
	conversionOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var conversionOptionAfterSelectMu sync.Mutex
var conversionOptionAfterSelectHooks []ConversionOptionHook

var conversionOptionBeforeInsertMu sync.Mutex
var conversionOptionBeforeInsertHooks []ConversionOptionHook
var conversionOptionAfterInsertMu sync.Mutex
var conversionOptionAfterInsertHooks []ConversionOptionHook

var conversionOptionBeforeUpdateMu sync.Mutex
var conversionOptionBeforeUpdateHooks []ConversionOptionHook
var conversionOptionAfterUpdateMu sync.Mutex
var conversionOptionAfterUpdateHooks []ConversionOptionHook

var conversionOptionBeforeDeleteMu sync.Mutex
var conversionOptionBeforeDeleteHooks []ConversionOptionHook
var conversionOptionAfterDeleteMu sync.Mutex
var conversionOptionAfterDeleteHooks []ConversionOptionHook

var conversionOptionBeforeUpsertMu sync.Mutex
var conversionOptionBeforeUpsertHooks []ConversionOptionHook
var conversionOptionAfterUpsertMu sync.Mutex
var conversionOptionAfterUpsertHooks []ConversionOptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConversionOption) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConversionOption) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConversionOption) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConversionOption) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConversionOption) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConversionOption) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConversionOption) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConversionOption) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConversionOption) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range conversionOptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConversionOptionHook registers your hook function for all future operations.
func AddConversionOptionHook(hookPoint boil.HookPoint, conversionOptionHook ConversionOptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		conversionOptionAfterSelectMu.Lock()
		conversionOptionAfterSelectHooks = append(conversionOptionAfterSelectHooks, conversionOptionHook)
		conversionOptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		conversionOptionBeforeInsertMu.Lock()
		conversionOptionBeforeInsertHooks = append(conversionOptionBeforeInsertHooks, conversionOptionHook)
		conversionOptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		conversionOptionAfterInsertMu.Lock()
		conversionOptionAfterInsertHooks = append(conversionOptionAfterInsertHooks, conversionOptionHook)
		conversionOptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		conversionOptionBeforeUpdateMu.Lock()
		conversionOptionBeforeUpdateHooks = append(conversionOptionBeforeUpdateHooks, conversionOptionHook)
		conversionOptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		conversionOptionAfterUpdateMu.Lock()
		conversionOptionAfterUpdateHooks = append(conversionOptionAfterUpdateHooks, conversionOptionHook)
		conversionOptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		conversionOptionBeforeDeleteMu.Lock()
		conversionOptionBeforeDeleteHooks = append(conversionOptionBeforeDeleteHooks, conversionOptionHook)
		conversionOptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		conversionOptionAfterDeleteMu.Lock()
		conversionOptionAfterDeleteHooks = append(conversionOptionAfterDeleteHooks, conversionOptionHook)
		conversionOptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		conversionOptionBeforeUpsertMu.Lock()
		conversionOptionBeforeUpsertHooks = append(conversionOptionBeforeUpsertHooks, conversionOptionHook)
		conversionOptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		conversionOptionAfterUpsertMu.Lock()
		conversionOptionAfterUpsertHooks = append(conversionOptionAfterUpsertHooks, conversionOptionHook)
		conversionOptionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single conversionOption record from the query using the global executor.
func (q conversionOptionQuery) OneG(ctx context.Context) (*ConversionOption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single conversionOption record from the query.
func (q conversionOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ConversionOption, error) {
	o := &ConversionOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for conversion_options")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ConversionOption records from the query using the global executor.
func (q conversionOptionQuery) AllG(ctx context.Context) (ConversionOptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ConversionOption records from the query.
func (q conversionOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConversionOptionSlice, error) {
	var o []*ConversionOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConversionOption slice")
	}

	if len(conversionOptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ConversionOption records in the query using the global executor
func (q conversionOptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ConversionOption records in the query.
func (q conversionOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count conversion_options rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q conversionOptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q conversionOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if conversion_options exists")
	}

	return count > 0, nil
}

// ConversionOptions retrieves all the records using an executor.
func ConversionOptions(mods ...qm.QueryMod) conversionOptionQuery {
	mods = append(mods, qm.From("\"conversion_options\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"conversion_options\".*"})
	}

	return conversionOptionQuery{q}
}

// FindConversionOptionG retrieves a single record by ID.
func FindConversionOptionG(ctx context.Context, iD null.Int64, selectCols ...string) (*ConversionOption, error) {
	return FindConversionOption(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindConversionOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConversionOption(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*ConversionOption, error) {
	conversionOptionObj := &ConversionOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"conversion_options\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, conversionOptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from conversion_options")
	}

	if err = conversionOptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return conversionOptionObj, err
	}

	return conversionOptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ConversionOption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConversionOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no conversion_options provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(conversionOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	conversionOptionInsertCacheMut.RLock()
	cache, cached := conversionOptionInsertCache[key]
	conversionOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			conversionOptionAllColumns,
			conversionOptionColumnsWithDefault,
			conversionOptionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, conversionOptionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(conversionOptionType, conversionOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(conversionOptionType, conversionOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"conversion_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"conversion_options\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into conversion_options")
	}

	if !cached {
		conversionOptionInsertCacheMut.Lock()
		conversionOptionInsertCache[key] = cache
		conversionOptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ConversionOption record using the global executor.
// See Update for more documentation.
func (o *ConversionOption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ConversionOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConversionOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	conversionOptionUpdateCacheMut.RLock()
	cache, cached := conversionOptionUpdateCache[key]
	conversionOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			conversionOptionAllColumns,
			conversionOptionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, conversionOptionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update conversion_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"conversion_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, conversionOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(conversionOptionType, conversionOptionMapping, append(wl, conversionOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update conversion_options row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for conversion_options")
	}

	if !cached {
		conversionOptionUpdateCacheMut.Lock()
		conversionOptionUpdateCache[key] = cache
		conversionOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q conversionOptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q conversionOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for conversion_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for conversion_options")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConversionOptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConversionOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conversionOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"conversion_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, conversionOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in conversionOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all conversionOption")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ConversionOption) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConversionOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no conversion_options provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(conversionOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	conversionOptionUpsertCacheMut.RLock()
	cache, cached := conversionOptionUpsertCache[key]
	conversionOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			conversionOptionAllColumns,
			conversionOptionColumnsWithDefault,
			conversionOptionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			conversionOptionAllColumns,
			conversionOptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert conversion_options, could not build update column list")
		}

		ret := strmangle.SetComplement(conversionOptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(conversionOptionPrimaryKeyColumns))
			copy(conflict, conversionOptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"conversion_options\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(conversionOptionType, conversionOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(conversionOptionType, conversionOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert conversion_options")
	}

	if !cached {
		conversionOptionUpsertCacheMut.Lock()
		conversionOptionUpsertCache[key] = cache
		conversionOptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ConversionOption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ConversionOption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ConversionOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConversionOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConversionOption provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), conversionOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"conversion_options\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from conversion_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for conversion_options")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q conversionOptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q conversionOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no conversionOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from conversion_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for conversion_options")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConversionOptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConversionOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(conversionOptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conversionOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"conversion_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, conversionOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from conversionOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for conversion_options")
	}

	if len(conversionOptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ConversionOption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ConversionOption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConversionOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConversionOption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConversionOptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ConversionOptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConversionOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConversionOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), conversionOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"conversion_options\".* FROM \"conversion_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, conversionOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConversionOptionSlice")
	}

	*o = slice

	return nil
}

// ConversionOptionExistsG checks if the ConversionOption row exists.
func ConversionOptionExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return ConversionOptionExists(ctx, boil.GetContextDB(), iD)
}

// ConversionOptionExists checks if the ConversionOption row exists.
func ConversionOptionExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"conversion_options\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if conversion_options exists")
	}

	return exists, nil
}

// Exists checks if the ConversionOption row exists.
func (o *ConversionOption) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConversionOptionExists(ctx, exec, o.ID)
}
