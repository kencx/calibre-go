// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Datum is an object representing the database table.
type Datum struct {
	ID               null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book             int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Format           string     `boil:"format" json:"format" toml:"format" yaml:"format"`
	UncompressedSize int64      `boil:"uncompressed_size" json:"uncompressed_size" toml:"uncompressed_size" yaml:"uncompressed_size"`
	Name             string     `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *datumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L datumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DatumColumns = struct {
	ID               string
	Book             string
	Format           string
	UncompressedSize string
	Name             string
}{
	ID:               "id",
	Book:             "book",
	Format:           "format",
	UncompressedSize: "uncompressed_size",
	Name:             "name",
}

var DatumTableColumns = struct {
	ID               string
	Book             string
	Format           string
	UncompressedSize string
	Name             string
}{
	ID:               "data.id",
	Book:             "data.book",
	Format:           "data.format",
	UncompressedSize: "data.uncompressed_size",
	Name:             "data.name",
}

// Generated where

var DatumWhere = struct {
	ID               whereHelpernull_Int64
	Book             whereHelperint64
	Format           whereHelperstring
	UncompressedSize whereHelperint64
	Name             whereHelperstring
}{
	ID:               whereHelpernull_Int64{field: "\"data\".\"id\""},
	Book:             whereHelperint64{field: "\"data\".\"book\""},
	Format:           whereHelperstring{field: "\"data\".\"format\""},
	UncompressedSize: whereHelperint64{field: "\"data\".\"uncompressed_size\""},
	Name:             whereHelperstring{field: "\"data\".\"name\""},
}

// DatumRels is where relationship names are stored.
var DatumRels = struct {
}{}

// datumR is where relationships are stored.
type datumR struct {
}

// NewStruct creates a new relationship struct
func (*datumR) NewStruct() *datumR {
	return &datumR{}
}

// datumL is where Load methods for each relationship are stored.
type datumL struct{}

var (
	datumAllColumns            = []string{"id", "book", "format", "uncompressed_size", "name"}
	datumColumnsWithoutDefault = []string{"book", "format", "uncompressed_size", "name"}
	datumColumnsWithDefault    = []string{"id"}
	datumPrimaryKeyColumns     = []string{"id"}
	datumGeneratedColumns      = []string{"id"}
)

type (
	// DatumSlice is an alias for a slice of pointers to Datum.
	// This should almost always be used instead of []Datum.
	DatumSlice []*Datum
	// DatumHook is the signature for custom Datum hook methods
	DatumHook func(context.Context, boil.ContextExecutor, *Datum) error

	datumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	datumType                 = reflect.TypeOf(&Datum{})
	datumMapping              = queries.MakeStructMapping(datumType)
	datumPrimaryKeyMapping, _ = queries.BindMapping(datumType, datumMapping, datumPrimaryKeyColumns)
	datumInsertCacheMut       sync.RWMutex
	datumInsertCache          = make(map[string]insertCache)
	datumUpdateCacheMut       sync.RWMutex
	datumUpdateCache          = make(map[string]updateCache)
	datumUpsertCacheMut       sync.RWMutex
	datumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var datumAfterSelectMu sync.Mutex
var datumAfterSelectHooks []DatumHook

var datumBeforeInsertMu sync.Mutex
var datumBeforeInsertHooks []DatumHook
var datumAfterInsertMu sync.Mutex
var datumAfterInsertHooks []DatumHook

var datumBeforeUpdateMu sync.Mutex
var datumBeforeUpdateHooks []DatumHook
var datumAfterUpdateMu sync.Mutex
var datumAfterUpdateHooks []DatumHook

var datumBeforeDeleteMu sync.Mutex
var datumBeforeDeleteHooks []DatumHook
var datumAfterDeleteMu sync.Mutex
var datumAfterDeleteHooks []DatumHook

var datumBeforeUpsertMu sync.Mutex
var datumBeforeUpsertHooks []DatumHook
var datumAfterUpsertMu sync.Mutex
var datumAfterUpsertHooks []DatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Datum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Datum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Datum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Datum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Datum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Datum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Datum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Datum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Datum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDatumHook registers your hook function for all future operations.
func AddDatumHook(hookPoint boil.HookPoint, datumHook DatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		datumAfterSelectMu.Lock()
		datumAfterSelectHooks = append(datumAfterSelectHooks, datumHook)
		datumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		datumBeforeInsertMu.Lock()
		datumBeforeInsertHooks = append(datumBeforeInsertHooks, datumHook)
		datumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		datumAfterInsertMu.Lock()
		datumAfterInsertHooks = append(datumAfterInsertHooks, datumHook)
		datumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		datumBeforeUpdateMu.Lock()
		datumBeforeUpdateHooks = append(datumBeforeUpdateHooks, datumHook)
		datumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		datumAfterUpdateMu.Lock()
		datumAfterUpdateHooks = append(datumAfterUpdateHooks, datumHook)
		datumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		datumBeforeDeleteMu.Lock()
		datumBeforeDeleteHooks = append(datumBeforeDeleteHooks, datumHook)
		datumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		datumAfterDeleteMu.Lock()
		datumAfterDeleteHooks = append(datumAfterDeleteHooks, datumHook)
		datumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		datumBeforeUpsertMu.Lock()
		datumBeforeUpsertHooks = append(datumBeforeUpsertHooks, datumHook)
		datumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		datumAfterUpsertMu.Lock()
		datumAfterUpsertHooks = append(datumAfterUpsertHooks, datumHook)
		datumAfterUpsertMu.Unlock()
	}
}

// OneG returns a single datum record from the query using the global executor.
func (q datumQuery) OneG(ctx context.Context) (*Datum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single datum record from the query.
func (q datumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Datum, error) {
	o := &Datum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Datum records from the query using the global executor.
func (q datumQuery) AllG(ctx context.Context) (DatumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Datum records from the query.
func (q datumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DatumSlice, error) {
	var o []*Datum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Datum slice")
	}

	if len(datumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Datum records in the query using the global executor
func (q datumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Datum records in the query.
func (q datumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q datumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q datumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data exists")
	}

	return count > 0, nil
}

// Data retrieves all the records using an executor.
func Data(mods ...qm.QueryMod) datumQuery {
	mods = append(mods, qm.From("\"data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"data\".*"})
	}

	return datumQuery{q}
}

// FindDatumG retrieves a single record by ID.
func FindDatumG(ctx context.Context, iD null.Int64, selectCols ...string) (*Datum, error) {
	return FindDatum(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDatum(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Datum, error) {
	datumObj := &Datum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"data\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, datumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data")
	}

	if err = datumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return datumObj, err
	}

	return datumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Datum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Datum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	datumInsertCacheMut.RLock()
	cache, cached := datumInsertCache[key]
	datumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			datumAllColumns,
			datumColumnsWithDefault,
			datumColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, datumGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(datumType, datumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(datumType, datumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data")
	}

	if !cached {
		datumInsertCacheMut.Lock()
		datumInsertCache[key] = cache
		datumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Datum record using the global executor.
// See Update for more documentation.
func (o *Datum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Datum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Datum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	datumUpdateCacheMut.RLock()
	cache, cached := datumUpdateCache[key]
	datumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			datumAllColumns,
			datumPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, datumGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, datumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(datumType, datumMapping, append(wl, datumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data")
	}

	if !cached {
		datumUpdateCacheMut.Lock()
		datumUpdateCache[key] = cache
		datumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q datumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q datumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DatumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in datum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all datum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Datum) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Datum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	datumUpsertCacheMut.RLock()
	cache, cached := datumUpsertCache[key]
	datumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			datumAllColumns,
			datumColumnsWithDefault,
			datumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			datumAllColumns,
			datumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert data, could not build update column list")
		}

		ret := strmangle.SetComplement(datumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(datumPrimaryKeyColumns))
			copy(conflict, datumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(datumType, datumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(datumType, datumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert data")
	}

	if !cached {
		datumUpsertCacheMut.Lock()
		datumUpsertCache[key] = cache
		datumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Datum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Datum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Datum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Datum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Datum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), datumPrimaryKeyMapping)
	sql := "DELETE FROM \"data\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q datumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q datumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no datumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DatumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(datumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from datum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data")
	}

	if len(datumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Datum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Datum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Datum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DatumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"data\".* FROM \"data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, datumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DatumSlice")
	}

	*o = slice

	return nil
}

// DatumExistsG checks if the Datum row exists.
func DatumExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return DatumExists(ctx, boil.GetContextDB(), iD)
}

// DatumExists checks if the Datum row exists.
func DatumExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"data\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data exists")
	}

	return exists, nil
}

// Exists checks if the Datum row exists.
func (o *Datum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DatumExists(ctx, exec, o.ID)
}
