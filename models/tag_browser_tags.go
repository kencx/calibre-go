// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TagBrowserTag is an object representing the database table.
type TagBrowserTag struct {
	ID        null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Count     null.String `boil:"count" json:"count,omitempty" toml:"count" yaml:"count,omitempty"`
	AvgRating null.String `boil:"avg_rating" json:"avg_rating,omitempty" toml:"avg_rating" yaml:"avg_rating,omitempty"`
	Sort      null.String `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
}

var TagBrowserTagColumns = struct {
	ID        string
	Name      string
	Count     string
	AvgRating string
	Sort      string
}{
	ID:        "id",
	Name:      "name",
	Count:     "count",
	AvgRating: "avg_rating",
	Sort:      "sort",
}

var TagBrowserTagTableColumns = struct {
	ID        string
	Name      string
	Count     string
	AvgRating string
	Sort      string
}{
	ID:        "tag_browser_tags.id",
	Name:      "tag_browser_tags.name",
	Count:     "tag_browser_tags.count",
	AvgRating: "tag_browser_tags.avg_rating",
	Sort:      "tag_browser_tags.sort",
}

// Generated where

var TagBrowserTagWhere = struct {
	ID        whereHelpernull_Int64
	Name      whereHelpernull_String
	Count     whereHelpernull_String
	AvgRating whereHelpernull_String
	Sort      whereHelpernull_String
}{
	ID:        whereHelpernull_Int64{field: "\"tag_browser_tags\".\"id\""},
	Name:      whereHelpernull_String{field: "\"tag_browser_tags\".\"name\""},
	Count:     whereHelpernull_String{field: "\"tag_browser_tags\".\"count\""},
	AvgRating: whereHelpernull_String{field: "\"tag_browser_tags\".\"avg_rating\""},
	Sort:      whereHelpernull_String{field: "\"tag_browser_tags\".\"sort\""},
}

var (
	tagBrowserTagAllColumns            = []string{"id", "name", "count", "avg_rating", "sort"}
	tagBrowserTagColumnsWithoutDefault = []string{}
	tagBrowserTagColumnsWithDefault    = []string{"id", "name", "count", "avg_rating", "sort"}
	tagBrowserTagPrimaryKeyColumns     = []string{}
	tagBrowserTagGeneratedColumns      = []string{}
)

type (
	// TagBrowserTagSlice is an alias for a slice of pointers to TagBrowserTag.
	// This should almost always be used instead of []TagBrowserTag.
	TagBrowserTagSlice []*TagBrowserTag
	// TagBrowserTagHook is the signature for custom TagBrowserTag hook methods
	TagBrowserTagHook func(context.Context, boil.ContextExecutor, *TagBrowserTag) error

	tagBrowserTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagBrowserTagType           = reflect.TypeOf(&TagBrowserTag{})
	tagBrowserTagMapping        = queries.MakeStructMapping(tagBrowserTagType)
	tagBrowserTagInsertCacheMut sync.RWMutex
	tagBrowserTagInsertCache    = make(map[string]insertCache)
	tagBrowserTagUpdateCacheMut sync.RWMutex
	tagBrowserTagUpdateCache    = make(map[string]updateCache)
	tagBrowserTagUpsertCacheMut sync.RWMutex
	tagBrowserTagUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var tagBrowserTagAfterSelectMu sync.Mutex
var tagBrowserTagAfterSelectHooks []TagBrowserTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TagBrowserTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBrowserTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagBrowserTagHook registers your hook function for all future operations.
func AddTagBrowserTagHook(hookPoint boil.HookPoint, tagBrowserTagHook TagBrowserTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tagBrowserTagAfterSelectMu.Lock()
		tagBrowserTagAfterSelectHooks = append(tagBrowserTagAfterSelectHooks, tagBrowserTagHook)
		tagBrowserTagAfterSelectMu.Unlock()
	}
}

// OneG returns a single tagBrowserTag record from the query using the global executor.
func (q tagBrowserTagQuery) OneG(ctx context.Context) (*TagBrowserTag, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tagBrowserTag record from the query.
func (q tagBrowserTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TagBrowserTag, error) {
	o := &TagBrowserTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tag_browser_tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TagBrowserTag records from the query using the global executor.
func (q tagBrowserTagQuery) AllG(ctx context.Context) (TagBrowserTagSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TagBrowserTag records from the query.
func (q tagBrowserTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (TagBrowserTagSlice, error) {
	var o []*TagBrowserTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TagBrowserTag slice")
	}

	if len(tagBrowserTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TagBrowserTag records in the query using the global executor
func (q tagBrowserTagQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TagBrowserTag records in the query.
func (q tagBrowserTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tag_browser_tags rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tagBrowserTagQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tagBrowserTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tag_browser_tags exists")
	}

	return count > 0, nil
}

// TagBrowserTags retrieves all the records using an executor.
func TagBrowserTags(mods ...qm.QueryMod) tagBrowserTagQuery {
	mods = append(mods, qm.From("\"tag_browser_tags\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tag_browser_tags\".*"})
	}

	return tagBrowserTagQuery{q}
}
