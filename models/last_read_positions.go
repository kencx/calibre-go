// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LastReadPosition is an object representing the database table.
type LastReadPosition struct {
	ID      null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book    int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Format  string     `boil:"format" json:"format" toml:"format" yaml:"format"`
	User    string     `boil:"user" json:"user" toml:"user" yaml:"user"`
	Device  string     `boil:"device" json:"device" toml:"device" yaml:"device"`
	Cfi     string     `boil:"cfi" json:"cfi" toml:"cfi" yaml:"cfi"`
	Epoch   float64    `boil:"epoch" json:"epoch" toml:"epoch" yaml:"epoch"`
	PosFrac float64    `boil:"pos_frac" json:"pos_frac" toml:"pos_frac" yaml:"pos_frac"`

	R *lastReadPositionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lastReadPositionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LastReadPositionColumns = struct {
	ID      string
	Book    string
	Format  string
	User    string
	Device  string
	Cfi     string
	Epoch   string
	PosFrac string
}{
	ID:      "id",
	Book:    "book",
	Format:  "format",
	User:    "user",
	Device:  "device",
	Cfi:     "cfi",
	Epoch:   "epoch",
	PosFrac: "pos_frac",
}

var LastReadPositionTableColumns = struct {
	ID      string
	Book    string
	Format  string
	User    string
	Device  string
	Cfi     string
	Epoch   string
	PosFrac string
}{
	ID:      "last_read_positions.id",
	Book:    "last_read_positions.book",
	Format:  "last_read_positions.format",
	User:    "last_read_positions.user",
	Device:  "last_read_positions.device",
	Cfi:     "last_read_positions.cfi",
	Epoch:   "last_read_positions.epoch",
	PosFrac: "last_read_positions.pos_frac",
}

// Generated where

var LastReadPositionWhere = struct {
	ID      whereHelpernull_Int64
	Book    whereHelperint64
	Format  whereHelperstring
	User    whereHelperstring
	Device  whereHelperstring
	Cfi     whereHelperstring
	Epoch   whereHelperfloat64
	PosFrac whereHelperfloat64
}{
	ID:      whereHelpernull_Int64{field: "\"last_read_positions\".\"id\""},
	Book:    whereHelperint64{field: "\"last_read_positions\".\"book\""},
	Format:  whereHelperstring{field: "\"last_read_positions\".\"format\""},
	User:    whereHelperstring{field: "\"last_read_positions\".\"user\""},
	Device:  whereHelperstring{field: "\"last_read_positions\".\"device\""},
	Cfi:     whereHelperstring{field: "\"last_read_positions\".\"cfi\""},
	Epoch:   whereHelperfloat64{field: "\"last_read_positions\".\"epoch\""},
	PosFrac: whereHelperfloat64{field: "\"last_read_positions\".\"pos_frac\""},
}

// LastReadPositionRels is where relationship names are stored.
var LastReadPositionRels = struct {
}{}

// lastReadPositionR is where relationships are stored.
type lastReadPositionR struct {
}

// NewStruct creates a new relationship struct
func (*lastReadPositionR) NewStruct() *lastReadPositionR {
	return &lastReadPositionR{}
}

// lastReadPositionL is where Load methods for each relationship are stored.
type lastReadPositionL struct{}

var (
	lastReadPositionAllColumns            = []string{"id", "book", "format", "user", "device", "cfi", "epoch", "pos_frac"}
	lastReadPositionColumnsWithoutDefault = []string{"book", "format", "user", "device", "cfi", "epoch"}
	lastReadPositionColumnsWithDefault    = []string{"id", "pos_frac"}
	lastReadPositionPrimaryKeyColumns     = []string{"id"}
	lastReadPositionGeneratedColumns      = []string{"id"}
)

type (
	// LastReadPositionSlice is an alias for a slice of pointers to LastReadPosition.
	// This should almost always be used instead of []LastReadPosition.
	LastReadPositionSlice []*LastReadPosition
	// LastReadPositionHook is the signature for custom LastReadPosition hook methods
	LastReadPositionHook func(context.Context, boil.ContextExecutor, *LastReadPosition) error

	lastReadPositionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lastReadPositionType                 = reflect.TypeOf(&LastReadPosition{})
	lastReadPositionMapping              = queries.MakeStructMapping(lastReadPositionType)
	lastReadPositionPrimaryKeyMapping, _ = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, lastReadPositionPrimaryKeyColumns)
	lastReadPositionInsertCacheMut       sync.RWMutex
	lastReadPositionInsertCache          = make(map[string]insertCache)
	lastReadPositionUpdateCacheMut       sync.RWMutex
	lastReadPositionUpdateCache          = make(map[string]updateCache)
	lastReadPositionUpsertCacheMut       sync.RWMutex
	lastReadPositionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lastReadPositionAfterSelectMu sync.Mutex
var lastReadPositionAfterSelectHooks []LastReadPositionHook

var lastReadPositionBeforeInsertMu sync.Mutex
var lastReadPositionBeforeInsertHooks []LastReadPositionHook
var lastReadPositionAfterInsertMu sync.Mutex
var lastReadPositionAfterInsertHooks []LastReadPositionHook

var lastReadPositionBeforeUpdateMu sync.Mutex
var lastReadPositionBeforeUpdateHooks []LastReadPositionHook
var lastReadPositionAfterUpdateMu sync.Mutex
var lastReadPositionAfterUpdateHooks []LastReadPositionHook

var lastReadPositionBeforeDeleteMu sync.Mutex
var lastReadPositionBeforeDeleteHooks []LastReadPositionHook
var lastReadPositionAfterDeleteMu sync.Mutex
var lastReadPositionAfterDeleteHooks []LastReadPositionHook

var lastReadPositionBeforeUpsertMu sync.Mutex
var lastReadPositionBeforeUpsertHooks []LastReadPositionHook
var lastReadPositionAfterUpsertMu sync.Mutex
var lastReadPositionAfterUpsertHooks []LastReadPositionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LastReadPosition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LastReadPosition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LastReadPosition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LastReadPosition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LastReadPosition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LastReadPosition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LastReadPosition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LastReadPosition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LastReadPosition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lastReadPositionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLastReadPositionHook registers your hook function for all future operations.
func AddLastReadPositionHook(hookPoint boil.HookPoint, lastReadPositionHook LastReadPositionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lastReadPositionAfterSelectMu.Lock()
		lastReadPositionAfterSelectHooks = append(lastReadPositionAfterSelectHooks, lastReadPositionHook)
		lastReadPositionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lastReadPositionBeforeInsertMu.Lock()
		lastReadPositionBeforeInsertHooks = append(lastReadPositionBeforeInsertHooks, lastReadPositionHook)
		lastReadPositionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lastReadPositionAfterInsertMu.Lock()
		lastReadPositionAfterInsertHooks = append(lastReadPositionAfterInsertHooks, lastReadPositionHook)
		lastReadPositionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lastReadPositionBeforeUpdateMu.Lock()
		lastReadPositionBeforeUpdateHooks = append(lastReadPositionBeforeUpdateHooks, lastReadPositionHook)
		lastReadPositionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lastReadPositionAfterUpdateMu.Lock()
		lastReadPositionAfterUpdateHooks = append(lastReadPositionAfterUpdateHooks, lastReadPositionHook)
		lastReadPositionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lastReadPositionBeforeDeleteMu.Lock()
		lastReadPositionBeforeDeleteHooks = append(lastReadPositionBeforeDeleteHooks, lastReadPositionHook)
		lastReadPositionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lastReadPositionAfterDeleteMu.Lock()
		lastReadPositionAfterDeleteHooks = append(lastReadPositionAfterDeleteHooks, lastReadPositionHook)
		lastReadPositionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lastReadPositionBeforeUpsertMu.Lock()
		lastReadPositionBeforeUpsertHooks = append(lastReadPositionBeforeUpsertHooks, lastReadPositionHook)
		lastReadPositionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lastReadPositionAfterUpsertMu.Lock()
		lastReadPositionAfterUpsertHooks = append(lastReadPositionAfterUpsertHooks, lastReadPositionHook)
		lastReadPositionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single lastReadPosition record from the query using the global executor.
func (q lastReadPositionQuery) OneG(ctx context.Context) (*LastReadPosition, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single lastReadPosition record from the query.
func (q lastReadPositionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LastReadPosition, error) {
	o := &LastReadPosition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for last_read_positions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all LastReadPosition records from the query using the global executor.
func (q lastReadPositionQuery) AllG(ctx context.Context) (LastReadPositionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all LastReadPosition records from the query.
func (q lastReadPositionQuery) All(ctx context.Context, exec boil.ContextExecutor) (LastReadPositionSlice, error) {
	var o []*LastReadPosition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LastReadPosition slice")
	}

	if len(lastReadPositionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all LastReadPosition records in the query using the global executor
func (q lastReadPositionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all LastReadPosition records in the query.
func (q lastReadPositionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count last_read_positions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q lastReadPositionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q lastReadPositionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if last_read_positions exists")
	}

	return count > 0, nil
}

// LastReadPositions retrieves all the records using an executor.
func LastReadPositions(mods ...qm.QueryMod) lastReadPositionQuery {
	mods = append(mods, qm.From("\"last_read_positions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"last_read_positions\".*"})
	}

	return lastReadPositionQuery{q}
}

// FindLastReadPositionG retrieves a single record by ID.
func FindLastReadPositionG(ctx context.Context, iD null.Int64, selectCols ...string) (*LastReadPosition, error) {
	return FindLastReadPosition(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindLastReadPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLastReadPosition(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*LastReadPosition, error) {
	lastReadPositionObj := &LastReadPosition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"last_read_positions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lastReadPositionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from last_read_positions")
	}

	if err = lastReadPositionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lastReadPositionObj, err
	}

	return lastReadPositionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *LastReadPosition) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LastReadPosition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no last_read_positions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lastReadPositionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lastReadPositionInsertCacheMut.RLock()
	cache, cached := lastReadPositionInsertCache[key]
	lastReadPositionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lastReadPositionAllColumns,
			lastReadPositionColumnsWithDefault,
			lastReadPositionColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, lastReadPositionGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"last_read_positions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"last_read_positions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into last_read_positions")
	}

	if !cached {
		lastReadPositionInsertCacheMut.Lock()
		lastReadPositionInsertCache[key] = cache
		lastReadPositionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single LastReadPosition record using the global executor.
// See Update for more documentation.
func (o *LastReadPosition) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the LastReadPosition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LastReadPosition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lastReadPositionUpdateCacheMut.RLock()
	cache, cached := lastReadPositionUpdateCache[key]
	lastReadPositionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lastReadPositionAllColumns,
			lastReadPositionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, lastReadPositionGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update last_read_positions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"last_read_positions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, lastReadPositionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, append(wl, lastReadPositionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update last_read_positions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for last_read_positions")
	}

	if !cached {
		lastReadPositionUpdateCacheMut.Lock()
		lastReadPositionUpdateCache[key] = cache
		lastReadPositionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q lastReadPositionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q lastReadPositionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for last_read_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for last_read_positions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LastReadPositionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LastReadPositionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastReadPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"last_read_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lastReadPositionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lastReadPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lastReadPosition")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *LastReadPosition) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LastReadPosition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no last_read_positions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lastReadPositionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lastReadPositionUpsertCacheMut.RLock()
	cache, cached := lastReadPositionUpsertCache[key]
	lastReadPositionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lastReadPositionAllColumns,
			lastReadPositionColumnsWithDefault,
			lastReadPositionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lastReadPositionAllColumns,
			lastReadPositionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert last_read_positions, could not build update column list")
		}

		ret := strmangle.SetComplement(lastReadPositionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lastReadPositionPrimaryKeyColumns))
			copy(conflict, lastReadPositionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"last_read_positions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lastReadPositionType, lastReadPositionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert last_read_positions")
	}

	if !cached {
		lastReadPositionUpsertCacheMut.Lock()
		lastReadPositionUpsertCache[key] = cache
		lastReadPositionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single LastReadPosition record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *LastReadPosition) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single LastReadPosition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LastReadPosition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LastReadPosition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lastReadPositionPrimaryKeyMapping)
	sql := "DELETE FROM \"last_read_positions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from last_read_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for last_read_positions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q lastReadPositionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q lastReadPositionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lastReadPositionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from last_read_positions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for last_read_positions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LastReadPositionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LastReadPositionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lastReadPositionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastReadPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"last_read_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lastReadPositionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lastReadPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for last_read_positions")
	}

	if len(lastReadPositionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *LastReadPosition) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no LastReadPosition provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LastReadPosition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLastReadPosition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LastReadPositionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty LastReadPositionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LastReadPositionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LastReadPositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lastReadPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"last_read_positions\".* FROM \"last_read_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lastReadPositionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LastReadPositionSlice")
	}

	*o = slice

	return nil
}

// LastReadPositionExistsG checks if the LastReadPosition row exists.
func LastReadPositionExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return LastReadPositionExists(ctx, boil.GetContextDB(), iD)
}

// LastReadPositionExists checks if the LastReadPosition row exists.
func LastReadPositionExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"last_read_positions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if last_read_positions exists")
	}

	return exists, nil
}

// Exists checks if the LastReadPosition row exists.
func (o *LastReadPosition) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LastReadPositionExists(ctx, exec, o.ID)
}
