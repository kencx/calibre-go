// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksPluginDatum is an object representing the database table.
type BooksPluginDatum struct {
	ID   null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Name string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Val  string     `boil:"val" json:"val" toml:"val" yaml:"val"`

	R *booksPluginDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksPluginDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksPluginDatumColumns = struct {
	ID   string
	Book string
	Name string
	Val  string
}{
	ID:   "id",
	Book: "book",
	Name: "name",
	Val:  "val",
}

var BooksPluginDatumTableColumns = struct {
	ID   string
	Book string
	Name string
	Val  string
}{
	ID:   "books_plugin_data.id",
	Book: "books_plugin_data.book",
	Name: "books_plugin_data.name",
	Val:  "books_plugin_data.val",
}

// Generated where

var BooksPluginDatumWhere = struct {
	ID   whereHelpernull_Int64
	Book whereHelperint64
	Name whereHelperstring
	Val  whereHelperstring
}{
	ID:   whereHelpernull_Int64{field: "\"books_plugin_data\".\"id\""},
	Book: whereHelperint64{field: "\"books_plugin_data\".\"book\""},
	Name: whereHelperstring{field: "\"books_plugin_data\".\"name\""},
	Val:  whereHelperstring{field: "\"books_plugin_data\".\"val\""},
}

// BooksPluginDatumRels is where relationship names are stored.
var BooksPluginDatumRels = struct {
}{}

// booksPluginDatumR is where relationships are stored.
type booksPluginDatumR struct {
}

// NewStruct creates a new relationship struct
func (*booksPluginDatumR) NewStruct() *booksPluginDatumR {
	return &booksPluginDatumR{}
}

// booksPluginDatumL is where Load methods for each relationship are stored.
type booksPluginDatumL struct{}

var (
	booksPluginDatumAllColumns            = []string{"id", "book", "name", "val"}
	booksPluginDatumColumnsWithoutDefault = []string{"book", "name", "val"}
	booksPluginDatumColumnsWithDefault    = []string{"id"}
	booksPluginDatumPrimaryKeyColumns     = []string{"id"}
	booksPluginDatumGeneratedColumns      = []string{"id"}
)

type (
	// BooksPluginDatumSlice is an alias for a slice of pointers to BooksPluginDatum.
	// This should almost always be used instead of []BooksPluginDatum.
	BooksPluginDatumSlice []*BooksPluginDatum
	// BooksPluginDatumHook is the signature for custom BooksPluginDatum hook methods
	BooksPluginDatumHook func(context.Context, boil.ContextExecutor, *BooksPluginDatum) error

	booksPluginDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksPluginDatumType                 = reflect.TypeOf(&BooksPluginDatum{})
	booksPluginDatumMapping              = queries.MakeStructMapping(booksPluginDatumType)
	booksPluginDatumPrimaryKeyMapping, _ = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, booksPluginDatumPrimaryKeyColumns)
	booksPluginDatumInsertCacheMut       sync.RWMutex
	booksPluginDatumInsertCache          = make(map[string]insertCache)
	booksPluginDatumUpdateCacheMut       sync.RWMutex
	booksPluginDatumUpdateCache          = make(map[string]updateCache)
	booksPluginDatumUpsertCacheMut       sync.RWMutex
	booksPluginDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksPluginDatumAfterSelectMu sync.Mutex
var booksPluginDatumAfterSelectHooks []BooksPluginDatumHook

var booksPluginDatumBeforeInsertMu sync.Mutex
var booksPluginDatumBeforeInsertHooks []BooksPluginDatumHook
var booksPluginDatumAfterInsertMu sync.Mutex
var booksPluginDatumAfterInsertHooks []BooksPluginDatumHook

var booksPluginDatumBeforeUpdateMu sync.Mutex
var booksPluginDatumBeforeUpdateHooks []BooksPluginDatumHook
var booksPluginDatumAfterUpdateMu sync.Mutex
var booksPluginDatumAfterUpdateHooks []BooksPluginDatumHook

var booksPluginDatumBeforeDeleteMu sync.Mutex
var booksPluginDatumBeforeDeleteHooks []BooksPluginDatumHook
var booksPluginDatumAfterDeleteMu sync.Mutex
var booksPluginDatumAfterDeleteHooks []BooksPluginDatumHook

var booksPluginDatumBeforeUpsertMu sync.Mutex
var booksPluginDatumBeforeUpsertHooks []BooksPluginDatumHook
var booksPluginDatumAfterUpsertMu sync.Mutex
var booksPluginDatumAfterUpsertHooks []BooksPluginDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksPluginDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksPluginDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksPluginDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksPluginDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksPluginDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksPluginDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksPluginDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksPluginDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksPluginDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksPluginDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksPluginDatumHook registers your hook function for all future operations.
func AddBooksPluginDatumHook(hookPoint boil.HookPoint, booksPluginDatumHook BooksPluginDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksPluginDatumAfterSelectMu.Lock()
		booksPluginDatumAfterSelectHooks = append(booksPluginDatumAfterSelectHooks, booksPluginDatumHook)
		booksPluginDatumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksPluginDatumBeforeInsertMu.Lock()
		booksPluginDatumBeforeInsertHooks = append(booksPluginDatumBeforeInsertHooks, booksPluginDatumHook)
		booksPluginDatumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksPluginDatumAfterInsertMu.Lock()
		booksPluginDatumAfterInsertHooks = append(booksPluginDatumAfterInsertHooks, booksPluginDatumHook)
		booksPluginDatumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksPluginDatumBeforeUpdateMu.Lock()
		booksPluginDatumBeforeUpdateHooks = append(booksPluginDatumBeforeUpdateHooks, booksPluginDatumHook)
		booksPluginDatumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksPluginDatumAfterUpdateMu.Lock()
		booksPluginDatumAfterUpdateHooks = append(booksPluginDatumAfterUpdateHooks, booksPluginDatumHook)
		booksPluginDatumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksPluginDatumBeforeDeleteMu.Lock()
		booksPluginDatumBeforeDeleteHooks = append(booksPluginDatumBeforeDeleteHooks, booksPluginDatumHook)
		booksPluginDatumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksPluginDatumAfterDeleteMu.Lock()
		booksPluginDatumAfterDeleteHooks = append(booksPluginDatumAfterDeleteHooks, booksPluginDatumHook)
		booksPluginDatumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksPluginDatumBeforeUpsertMu.Lock()
		booksPluginDatumBeforeUpsertHooks = append(booksPluginDatumBeforeUpsertHooks, booksPluginDatumHook)
		booksPluginDatumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksPluginDatumAfterUpsertMu.Lock()
		booksPluginDatumAfterUpsertHooks = append(booksPluginDatumAfterUpsertHooks, booksPluginDatumHook)
		booksPluginDatumAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksPluginDatum record from the query using the global executor.
func (q booksPluginDatumQuery) OneG(ctx context.Context) (*BooksPluginDatum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksPluginDatum record from the query.
func (q booksPluginDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksPluginDatum, error) {
	o := &BooksPluginDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_plugin_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksPluginDatum records from the query using the global executor.
func (q booksPluginDatumQuery) AllG(ctx context.Context) (BooksPluginDatumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksPluginDatum records from the query.
func (q booksPluginDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksPluginDatumSlice, error) {
	var o []*BooksPluginDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksPluginDatum slice")
	}

	if len(booksPluginDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksPluginDatum records in the query using the global executor
func (q booksPluginDatumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksPluginDatum records in the query.
func (q booksPluginDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_plugin_data rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksPluginDatumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksPluginDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_plugin_data exists")
	}

	return count > 0, nil
}

// BooksPluginData retrieves all the records using an executor.
func BooksPluginData(mods ...qm.QueryMod) booksPluginDatumQuery {
	mods = append(mods, qm.From("\"books_plugin_data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_plugin_data\".*"})
	}

	return booksPluginDatumQuery{q}
}

// FindBooksPluginDatumG retrieves a single record by ID.
func FindBooksPluginDatumG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksPluginDatum, error) {
	return FindBooksPluginDatum(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksPluginDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksPluginDatum(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksPluginDatum, error) {
	booksPluginDatumObj := &BooksPluginDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_plugin_data\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksPluginDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_plugin_data")
	}

	if err = booksPluginDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksPluginDatumObj, err
	}

	return booksPluginDatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksPluginDatum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksPluginDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_plugin_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksPluginDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksPluginDatumInsertCacheMut.RLock()
	cache, cached := booksPluginDatumInsertCache[key]
	booksPluginDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksPluginDatumAllColumns,
			booksPluginDatumColumnsWithDefault,
			booksPluginDatumColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksPluginDatumGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_plugin_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_plugin_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_plugin_data")
	}

	if !cached {
		booksPluginDatumInsertCacheMut.Lock()
		booksPluginDatumInsertCache[key] = cache
		booksPluginDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksPluginDatum record using the global executor.
// See Update for more documentation.
func (o *BooksPluginDatum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksPluginDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksPluginDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksPluginDatumUpdateCacheMut.RLock()
	cache, cached := booksPluginDatumUpdateCache[key]
	booksPluginDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksPluginDatumAllColumns,
			booksPluginDatumPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksPluginDatumGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_plugin_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_plugin_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksPluginDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, append(wl, booksPluginDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_plugin_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_plugin_data")
	}

	if !cached {
		booksPluginDatumUpdateCacheMut.Lock()
		booksPluginDatumUpdateCache[key] = cache
		booksPluginDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksPluginDatumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksPluginDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_plugin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_plugin_data")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksPluginDatumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksPluginDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPluginDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_plugin_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPluginDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksPluginDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksPluginDatum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksPluginDatum) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksPluginDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_plugin_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksPluginDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksPluginDatumUpsertCacheMut.RLock()
	cache, cached := booksPluginDatumUpsertCache[key]
	booksPluginDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksPluginDatumAllColumns,
			booksPluginDatumColumnsWithDefault,
			booksPluginDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksPluginDatumAllColumns,
			booksPluginDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_plugin_data, could not build update column list")
		}

		ret := strmangle.SetComplement(booksPluginDatumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksPluginDatumPrimaryKeyColumns))
			copy(conflict, booksPluginDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_plugin_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksPluginDatumType, booksPluginDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_plugin_data")
	}

	if !cached {
		booksPluginDatumUpsertCacheMut.Lock()
		booksPluginDatumUpsertCache[key] = cache
		booksPluginDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksPluginDatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksPluginDatum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksPluginDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksPluginDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksPluginDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksPluginDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"books_plugin_data\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_plugin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_plugin_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksPluginDatumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksPluginDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksPluginDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_plugin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_plugin_data")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksPluginDatumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksPluginDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksPluginDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPluginDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_plugin_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPluginDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksPluginDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_plugin_data")
	}

	if len(booksPluginDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksPluginDatum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksPluginDatum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksPluginDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksPluginDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksPluginDatumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksPluginDatumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksPluginDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksPluginDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksPluginDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_plugin_data\".* FROM \"books_plugin_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksPluginDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksPluginDatumSlice")
	}

	*o = slice

	return nil
}

// BooksPluginDatumExistsG checks if the BooksPluginDatum row exists.
func BooksPluginDatumExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksPluginDatumExists(ctx, boil.GetContextDB(), iD)
}

// BooksPluginDatumExists checks if the BooksPluginDatum row exists.
func BooksPluginDatumExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_plugin_data\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_plugin_data exists")
	}

	return exists, nil
}

// Exists checks if the BooksPluginDatum row exists.
func (o *BooksPluginDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksPluginDatumExists(ctx, exec, o.ID)
}
