// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TagBrowserRating is an object representing the database table.
type TagBrowserRating struct {
	ID        null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Rating    null.Int64  `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	Count     null.String `boil:"count" json:"count,omitempty" toml:"count" yaml:"count,omitempty"`
	AvgRating null.String `boil:"avg_rating" json:"avg_rating,omitempty" toml:"avg_rating" yaml:"avg_rating,omitempty"`
	Sort      null.Int64  `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`
}

var TagBrowserRatingColumns = struct {
	ID        string
	Rating    string
	Count     string
	AvgRating string
	Sort      string
}{
	ID:        "id",
	Rating:    "rating",
	Count:     "count",
	AvgRating: "avg_rating",
	Sort:      "sort",
}

var TagBrowserRatingTableColumns = struct {
	ID        string
	Rating    string
	Count     string
	AvgRating string
	Sort      string
}{
	ID:        "tag_browser_ratings.id",
	Rating:    "tag_browser_ratings.rating",
	Count:     "tag_browser_ratings.count",
	AvgRating: "tag_browser_ratings.avg_rating",
	Sort:      "tag_browser_ratings.sort",
}

// Generated where

var TagBrowserRatingWhere = struct {
	ID        whereHelpernull_Int64
	Rating    whereHelpernull_Int64
	Count     whereHelpernull_String
	AvgRating whereHelpernull_String
	Sort      whereHelpernull_Int64
}{
	ID:        whereHelpernull_Int64{field: "\"tag_browser_ratings\".\"id\""},
	Rating:    whereHelpernull_Int64{field: "\"tag_browser_ratings\".\"rating\""},
	Count:     whereHelpernull_String{field: "\"tag_browser_ratings\".\"count\""},
	AvgRating: whereHelpernull_String{field: "\"tag_browser_ratings\".\"avg_rating\""},
	Sort:      whereHelpernull_Int64{field: "\"tag_browser_ratings\".\"sort\""},
}

var (
	tagBrowserRatingAllColumns            = []string{"id", "rating", "count", "avg_rating", "sort"}
	tagBrowserRatingColumnsWithoutDefault = []string{}
	tagBrowserRatingColumnsWithDefault    = []string{"id", "rating", "count", "avg_rating", "sort"}
	tagBrowserRatingPrimaryKeyColumns     = []string{}
	tagBrowserRatingGeneratedColumns      = []string{}
)

type (
	// TagBrowserRatingSlice is an alias for a slice of pointers to TagBrowserRating.
	// This should almost always be used instead of []TagBrowserRating.
	TagBrowserRatingSlice []*TagBrowserRating
	// TagBrowserRatingHook is the signature for custom TagBrowserRating hook methods
	TagBrowserRatingHook func(context.Context, boil.ContextExecutor, *TagBrowserRating) error

	tagBrowserRatingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagBrowserRatingType           = reflect.TypeOf(&TagBrowserRating{})
	tagBrowserRatingMapping        = queries.MakeStructMapping(tagBrowserRatingType)
	tagBrowserRatingInsertCacheMut sync.RWMutex
	tagBrowserRatingInsertCache    = make(map[string]insertCache)
	tagBrowserRatingUpdateCacheMut sync.RWMutex
	tagBrowserRatingUpdateCache    = make(map[string]updateCache)
	tagBrowserRatingUpsertCacheMut sync.RWMutex
	tagBrowserRatingUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var tagBrowserRatingAfterSelectMu sync.Mutex
var tagBrowserRatingAfterSelectHooks []TagBrowserRatingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TagBrowserRating) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBrowserRatingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagBrowserRatingHook registers your hook function for all future operations.
func AddTagBrowserRatingHook(hookPoint boil.HookPoint, tagBrowserRatingHook TagBrowserRatingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tagBrowserRatingAfterSelectMu.Lock()
		tagBrowserRatingAfterSelectHooks = append(tagBrowserRatingAfterSelectHooks, tagBrowserRatingHook)
		tagBrowserRatingAfterSelectMu.Unlock()
	}
}

// OneG returns a single tagBrowserRating record from the query using the global executor.
func (q tagBrowserRatingQuery) OneG(ctx context.Context) (*TagBrowserRating, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tagBrowserRating record from the query.
func (q tagBrowserRatingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TagBrowserRating, error) {
	o := &TagBrowserRating{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tag_browser_ratings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TagBrowserRating records from the query using the global executor.
func (q tagBrowserRatingQuery) AllG(ctx context.Context) (TagBrowserRatingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TagBrowserRating records from the query.
func (q tagBrowserRatingQuery) All(ctx context.Context, exec boil.ContextExecutor) (TagBrowserRatingSlice, error) {
	var o []*TagBrowserRating

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TagBrowserRating slice")
	}

	if len(tagBrowserRatingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TagBrowserRating records in the query using the global executor
func (q tagBrowserRatingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TagBrowserRating records in the query.
func (q tagBrowserRatingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tag_browser_ratings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tagBrowserRatingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tagBrowserRatingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tag_browser_ratings exists")
	}

	return count > 0, nil
}

// TagBrowserRatings retrieves all the records using an executor.
func TagBrowserRatings(mods ...qm.QueryMod) tagBrowserRatingQuery {
	mods = append(mods, qm.From("\"tag_browser_ratings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tag_browser_ratings\".*"})
	}

	return tagBrowserRatingQuery{q}
}
