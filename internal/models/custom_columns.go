// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomColumn is an object representing the database table.
type CustomColumn struct {
	ID            null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Label         string     `boil:"label" json:"label" toml:"label" yaml:"label"`
	Name          string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Datatype      string     `boil:"datatype" json:"datatype" toml:"datatype" yaml:"datatype"`
	MarkForDelete string     `boil:"mark_for_delete" json:"mark_for_delete" toml:"mark_for_delete" yaml:"mark_for_delete"`
	Editable      string     `boil:"editable" json:"editable" toml:"editable" yaml:"editable"`
	Display       string     `boil:"display" json:"display" toml:"display" yaml:"display"`
	IsMultiple    string     `boil:"is_multiple" json:"is_multiple" toml:"is_multiple" yaml:"is_multiple"`
	Normalized    string     `boil:"normalized" json:"normalized" toml:"normalized" yaml:"normalized"`

	R *customColumnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customColumnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomColumnColumns = struct {
	ID            string
	Label         string
	Name          string
	Datatype      string
	MarkForDelete string
	Editable      string
	Display       string
	IsMultiple    string
	Normalized    string
}{
	ID:            "id",
	Label:         "label",
	Name:          "name",
	Datatype:      "datatype",
	MarkForDelete: "mark_for_delete",
	Editable:      "editable",
	Display:       "display",
	IsMultiple:    "is_multiple",
	Normalized:    "normalized",
}

var CustomColumnTableColumns = struct {
	ID            string
	Label         string
	Name          string
	Datatype      string
	MarkForDelete string
	Editable      string
	Display       string
	IsMultiple    string
	Normalized    string
}{
	ID:            "custom_columns.id",
	Label:         "custom_columns.label",
	Name:          "custom_columns.name",
	Datatype:      "custom_columns.datatype",
	MarkForDelete: "custom_columns.mark_for_delete",
	Editable:      "custom_columns.editable",
	Display:       "custom_columns.display",
	IsMultiple:    "custom_columns.is_multiple",
	Normalized:    "custom_columns.normalized",
}

// Generated where

var CustomColumnWhere = struct {
	ID            whereHelpernull_Int64
	Label         whereHelperstring
	Name          whereHelperstring
	Datatype      whereHelperstring
	MarkForDelete whereHelperstring
	Editable      whereHelperstring
	Display       whereHelperstring
	IsMultiple    whereHelperstring
	Normalized    whereHelperstring
}{
	ID:            whereHelpernull_Int64{field: "\"custom_columns\".\"id\""},
	Label:         whereHelperstring{field: "\"custom_columns\".\"label\""},
	Name:          whereHelperstring{field: "\"custom_columns\".\"name\""},
	Datatype:      whereHelperstring{field: "\"custom_columns\".\"datatype\""},
	MarkForDelete: whereHelperstring{field: "\"custom_columns\".\"mark_for_delete\""},
	Editable:      whereHelperstring{field: "\"custom_columns\".\"editable\""},
	Display:       whereHelperstring{field: "\"custom_columns\".\"display\""},
	IsMultiple:    whereHelperstring{field: "\"custom_columns\".\"is_multiple\""},
	Normalized:    whereHelperstring{field: "\"custom_columns\".\"normalized\""},
}

// CustomColumnRels is where relationship names are stored.
var CustomColumnRels = struct {
}{}

// customColumnR is where relationships are stored.
type customColumnR struct {
}

// NewStruct creates a new relationship struct
func (*customColumnR) NewStruct() *customColumnR {
	return &customColumnR{}
}

// customColumnL is where Load methods for each relationship are stored.
type customColumnL struct{}

var (
	customColumnAllColumns            = []string{"id", "label", "name", "datatype", "mark_for_delete", "editable", "display", "is_multiple", "normalized"}
	customColumnColumnsWithoutDefault = []string{"label", "name", "datatype", "normalized"}
	customColumnColumnsWithDefault    = []string{"id", "mark_for_delete", "editable", "display", "is_multiple"}
	customColumnPrimaryKeyColumns     = []string{"id"}
	customColumnGeneratedColumns      = []string{"id"}
)

type (
	// CustomColumnSlice is an alias for a slice of pointers to CustomColumn.
	// This should almost always be used instead of []CustomColumn.
	CustomColumnSlice []*CustomColumn
	// CustomColumnHook is the signature for custom CustomColumn hook methods
	CustomColumnHook func(context.Context, boil.ContextExecutor, *CustomColumn) error

	customColumnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customColumnType                 = reflect.TypeOf(&CustomColumn{})
	customColumnMapping              = queries.MakeStructMapping(customColumnType)
	customColumnPrimaryKeyMapping, _ = queries.BindMapping(customColumnType, customColumnMapping, customColumnPrimaryKeyColumns)
	customColumnInsertCacheMut       sync.RWMutex
	customColumnInsertCache          = make(map[string]insertCache)
	customColumnUpdateCacheMut       sync.RWMutex
	customColumnUpdateCache          = make(map[string]updateCache)
	customColumnUpsertCacheMut       sync.RWMutex
	customColumnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customColumnAfterSelectMu sync.Mutex
var customColumnAfterSelectHooks []CustomColumnHook

var customColumnBeforeInsertMu sync.Mutex
var customColumnBeforeInsertHooks []CustomColumnHook
var customColumnAfterInsertMu sync.Mutex
var customColumnAfterInsertHooks []CustomColumnHook

var customColumnBeforeUpdateMu sync.Mutex
var customColumnBeforeUpdateHooks []CustomColumnHook
var customColumnAfterUpdateMu sync.Mutex
var customColumnAfterUpdateHooks []CustomColumnHook

var customColumnBeforeDeleteMu sync.Mutex
var customColumnBeforeDeleteHooks []CustomColumnHook
var customColumnAfterDeleteMu sync.Mutex
var customColumnAfterDeleteHooks []CustomColumnHook

var customColumnBeforeUpsertMu sync.Mutex
var customColumnBeforeUpsertHooks []CustomColumnHook
var customColumnAfterUpsertMu sync.Mutex
var customColumnAfterUpsertHooks []CustomColumnHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomColumn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomColumn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomColumn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomColumn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomColumn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomColumn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomColumn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomColumn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomColumn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customColumnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomColumnHook registers your hook function for all future operations.
func AddCustomColumnHook(hookPoint boil.HookPoint, customColumnHook CustomColumnHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customColumnAfterSelectMu.Lock()
		customColumnAfterSelectHooks = append(customColumnAfterSelectHooks, customColumnHook)
		customColumnAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		customColumnBeforeInsertMu.Lock()
		customColumnBeforeInsertHooks = append(customColumnBeforeInsertHooks, customColumnHook)
		customColumnBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		customColumnAfterInsertMu.Lock()
		customColumnAfterInsertHooks = append(customColumnAfterInsertHooks, customColumnHook)
		customColumnAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		customColumnBeforeUpdateMu.Lock()
		customColumnBeforeUpdateHooks = append(customColumnBeforeUpdateHooks, customColumnHook)
		customColumnBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		customColumnAfterUpdateMu.Lock()
		customColumnAfterUpdateHooks = append(customColumnAfterUpdateHooks, customColumnHook)
		customColumnAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		customColumnBeforeDeleteMu.Lock()
		customColumnBeforeDeleteHooks = append(customColumnBeforeDeleteHooks, customColumnHook)
		customColumnBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		customColumnAfterDeleteMu.Lock()
		customColumnAfterDeleteHooks = append(customColumnAfterDeleteHooks, customColumnHook)
		customColumnAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		customColumnBeforeUpsertMu.Lock()
		customColumnBeforeUpsertHooks = append(customColumnBeforeUpsertHooks, customColumnHook)
		customColumnBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		customColumnAfterUpsertMu.Lock()
		customColumnAfterUpsertHooks = append(customColumnAfterUpsertHooks, customColumnHook)
		customColumnAfterUpsertMu.Unlock()
	}
}

// OneG returns a single customColumn record from the query using the global executor.
func (q customColumnQuery) OneG(ctx context.Context) (*CustomColumn, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single customColumn record from the query.
func (q customColumnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomColumn, error) {
	o := &CustomColumn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for custom_columns")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CustomColumn records from the query using the global executor.
func (q customColumnQuery) AllG(ctx context.Context) (CustomColumnSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CustomColumn records from the query.
func (q customColumnQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomColumnSlice, error) {
	var o []*CustomColumn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomColumn slice")
	}

	if len(customColumnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CustomColumn records in the query using the global executor
func (q customColumnQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CustomColumn records in the query.
func (q customColumnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count custom_columns rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q customColumnQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q customColumnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if custom_columns exists")
	}

	return count > 0, nil
}

// CustomColumns retrieves all the records using an executor.
func CustomColumns(mods ...qm.QueryMod) customColumnQuery {
	mods = append(mods, qm.From("\"custom_columns\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"custom_columns\".*"})
	}

	return customColumnQuery{q}
}

// FindCustomColumnG retrieves a single record by ID.
func FindCustomColumnG(ctx context.Context, iD null.Int64, selectCols ...string) (*CustomColumn, error) {
	return FindCustomColumn(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCustomColumn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomColumn(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*CustomColumn, error) {
	customColumnObj := &CustomColumn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"custom_columns\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, customColumnObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from custom_columns")
	}

	if err = customColumnObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customColumnObj, err
	}

	return customColumnObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CustomColumn) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomColumn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no custom_columns provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customColumnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customColumnInsertCacheMut.RLock()
	cache, cached := customColumnInsertCache[key]
	customColumnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customColumnAllColumns,
			customColumnColumnsWithDefault,
			customColumnColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, customColumnGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(customColumnType, customColumnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customColumnType, customColumnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"custom_columns\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"custom_columns\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into custom_columns")
	}

	if !cached {
		customColumnInsertCacheMut.Lock()
		customColumnInsertCache[key] = cache
		customColumnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CustomColumn record using the global executor.
// See Update for more documentation.
func (o *CustomColumn) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CustomColumn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomColumn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customColumnUpdateCacheMut.RLock()
	cache, cached := customColumnUpdateCache[key]
	customColumnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customColumnAllColumns,
			customColumnPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, customColumnGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update custom_columns, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"custom_columns\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, customColumnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customColumnType, customColumnMapping, append(wl, customColumnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update custom_columns row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for custom_columns")
	}

	if !cached {
		customColumnUpdateCacheMut.Lock()
		customColumnUpdateCache[key] = cache
		customColumnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q customColumnQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q customColumnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for custom_columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for custom_columns")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CustomColumnSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomColumnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customColumnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"custom_columns\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customColumnPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customColumn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customColumn")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CustomColumn) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomColumn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no custom_columns provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customColumnColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customColumnUpsertCacheMut.RLock()
	cache, cached := customColumnUpsertCache[key]
	customColumnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			customColumnAllColumns,
			customColumnColumnsWithDefault,
			customColumnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			customColumnAllColumns,
			customColumnPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert custom_columns, could not build update column list")
		}

		ret := strmangle.SetComplement(customColumnAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(customColumnPrimaryKeyColumns))
			copy(conflict, customColumnPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"custom_columns\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(customColumnType, customColumnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customColumnType, customColumnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert custom_columns")
	}

	if !cached {
		customColumnUpsertCacheMut.Lock()
		customColumnUpsertCache[key] = cache
		customColumnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CustomColumn record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CustomColumn) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CustomColumn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomColumn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomColumn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customColumnPrimaryKeyMapping)
	sql := "DELETE FROM \"custom_columns\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from custom_columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for custom_columns")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q customColumnQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q customColumnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customColumnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from custom_columns")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for custom_columns")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CustomColumnSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomColumnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customColumnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customColumnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"custom_columns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customColumnPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customColumn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for custom_columns")
	}

	if len(customColumnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CustomColumn) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CustomColumn provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomColumn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomColumn(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomColumnSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CustomColumnSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomColumnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomColumnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customColumnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"custom_columns\".* FROM \"custom_columns\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customColumnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomColumnSlice")
	}

	*o = slice

	return nil
}

// CustomColumnExistsG checks if the CustomColumn row exists.
func CustomColumnExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return CustomColumnExists(ctx, boil.GetContextDB(), iD)
}

// CustomColumnExists checks if the CustomColumn row exists.
func CustomColumnExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"custom_columns\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if custom_columns exists")
	}

	return exists, nil
}

// Exists checks if the CustomColumn row exists.
func (o *CustomColumn) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CustomColumnExists(ctx, exec, o.ID)
}
