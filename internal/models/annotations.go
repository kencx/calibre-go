// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Annotation is an object representing the database table.
type Annotation struct {
	ID             null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book           int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Format         string     `boil:"format" json:"format" toml:"format" yaml:"format"`
	UserType       string     `boil:"user_type" json:"user_type" toml:"user_type" yaml:"user_type"`
	User           string     `boil:"user" json:"user" toml:"user" yaml:"user"`
	Timestamp      float64    `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	AnnotID        string     `boil:"annot_id" json:"annot_id" toml:"annot_id" yaml:"annot_id"`
	AnnotType      string     `boil:"annot_type" json:"annot_type" toml:"annot_type" yaml:"annot_type"`
	AnnotData      string     `boil:"annot_data" json:"annot_data" toml:"annot_data" yaml:"annot_data"`
	SearchableText string     `boil:"searchable_text" json:"searchable_text" toml:"searchable_text" yaml:"searchable_text"`

	R *annotationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L annotationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnnotationColumns = struct {
	ID             string
	Book           string
	Format         string
	UserType       string
	User           string
	Timestamp      string
	AnnotID        string
	AnnotType      string
	AnnotData      string
	SearchableText string
}{
	ID:             "id",
	Book:           "book",
	Format:         "format",
	UserType:       "user_type",
	User:           "user",
	Timestamp:      "timestamp",
	AnnotID:        "annot_id",
	AnnotType:      "annot_type",
	AnnotData:      "annot_data",
	SearchableText: "searchable_text",
}

var AnnotationTableColumns = struct {
	ID             string
	Book           string
	Format         string
	UserType       string
	User           string
	Timestamp      string
	AnnotID        string
	AnnotType      string
	AnnotData      string
	SearchableText string
}{
	ID:             "annotations.id",
	Book:           "annotations.book",
	Format:         "annotations.format",
	UserType:       "annotations.user_type",
	User:           "annotations.user",
	Timestamp:      "annotations.timestamp",
	AnnotID:        "annotations.annot_id",
	AnnotType:      "annotations.annot_type",
	AnnotData:      "annotations.annot_data",
	SearchableText: "annotations.searchable_text",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AnnotationWhere = struct {
	ID             whereHelpernull_Int64
	Book           whereHelperint64
	Format         whereHelperstring
	UserType       whereHelperstring
	User           whereHelperstring
	Timestamp      whereHelperfloat64
	AnnotID        whereHelperstring
	AnnotType      whereHelperstring
	AnnotData      whereHelperstring
	SearchableText whereHelperstring
}{
	ID:             whereHelpernull_Int64{field: "\"annotations\".\"id\""},
	Book:           whereHelperint64{field: "\"annotations\".\"book\""},
	Format:         whereHelperstring{field: "\"annotations\".\"format\""},
	UserType:       whereHelperstring{field: "\"annotations\".\"user_type\""},
	User:           whereHelperstring{field: "\"annotations\".\"user\""},
	Timestamp:      whereHelperfloat64{field: "\"annotations\".\"timestamp\""},
	AnnotID:        whereHelperstring{field: "\"annotations\".\"annot_id\""},
	AnnotType:      whereHelperstring{field: "\"annotations\".\"annot_type\""},
	AnnotData:      whereHelperstring{field: "\"annotations\".\"annot_data\""},
	SearchableText: whereHelperstring{field: "\"annotations\".\"searchable_text\""},
}

// AnnotationRels is where relationship names are stored.
var AnnotationRels = struct {
}{}

// annotationR is where relationships are stored.
type annotationR struct {
}

// NewStruct creates a new relationship struct
func (*annotationR) NewStruct() *annotationR {
	return &annotationR{}
}

// annotationL is where Load methods for each relationship are stored.
type annotationL struct{}

var (
	annotationAllColumns            = []string{"id", "book", "format", "user_type", "user", "timestamp", "annot_id", "annot_type", "annot_data", "searchable_text"}
	annotationColumnsWithoutDefault = []string{"book", "format", "user_type", "user", "timestamp", "annot_id", "annot_type", "annot_data"}
	annotationColumnsWithDefault    = []string{"id", "searchable_text"}
	annotationPrimaryKeyColumns     = []string{"id"}
	annotationGeneratedColumns      = []string{"id"}
)

type (
	// AnnotationSlice is an alias for a slice of pointers to Annotation.
	// This should almost always be used instead of []Annotation.
	AnnotationSlice []*Annotation
	// AnnotationHook is the signature for custom Annotation hook methods
	AnnotationHook func(context.Context, boil.ContextExecutor, *Annotation) error

	annotationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	annotationType                 = reflect.TypeOf(&Annotation{})
	annotationMapping              = queries.MakeStructMapping(annotationType)
	annotationPrimaryKeyMapping, _ = queries.BindMapping(annotationType, annotationMapping, annotationPrimaryKeyColumns)
	annotationInsertCacheMut       sync.RWMutex
	annotationInsertCache          = make(map[string]insertCache)
	annotationUpdateCacheMut       sync.RWMutex
	annotationUpdateCache          = make(map[string]updateCache)
	annotationUpsertCacheMut       sync.RWMutex
	annotationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var annotationAfterSelectMu sync.Mutex
var annotationAfterSelectHooks []AnnotationHook

var annotationBeforeInsertMu sync.Mutex
var annotationBeforeInsertHooks []AnnotationHook
var annotationAfterInsertMu sync.Mutex
var annotationAfterInsertHooks []AnnotationHook

var annotationBeforeUpdateMu sync.Mutex
var annotationBeforeUpdateHooks []AnnotationHook
var annotationAfterUpdateMu sync.Mutex
var annotationAfterUpdateHooks []AnnotationHook

var annotationBeforeDeleteMu sync.Mutex
var annotationBeforeDeleteHooks []AnnotationHook
var annotationAfterDeleteMu sync.Mutex
var annotationAfterDeleteHooks []AnnotationHook

var annotationBeforeUpsertMu sync.Mutex
var annotationBeforeUpsertHooks []AnnotationHook
var annotationAfterUpsertMu sync.Mutex
var annotationAfterUpsertHooks []AnnotationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Annotation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Annotation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Annotation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Annotation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Annotation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Annotation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Annotation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Annotation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Annotation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range annotationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnnotationHook registers your hook function for all future operations.
func AddAnnotationHook(hookPoint boil.HookPoint, annotationHook AnnotationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		annotationAfterSelectMu.Lock()
		annotationAfterSelectHooks = append(annotationAfterSelectHooks, annotationHook)
		annotationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		annotationBeforeInsertMu.Lock()
		annotationBeforeInsertHooks = append(annotationBeforeInsertHooks, annotationHook)
		annotationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		annotationAfterInsertMu.Lock()
		annotationAfterInsertHooks = append(annotationAfterInsertHooks, annotationHook)
		annotationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		annotationBeforeUpdateMu.Lock()
		annotationBeforeUpdateHooks = append(annotationBeforeUpdateHooks, annotationHook)
		annotationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		annotationAfterUpdateMu.Lock()
		annotationAfterUpdateHooks = append(annotationAfterUpdateHooks, annotationHook)
		annotationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		annotationBeforeDeleteMu.Lock()
		annotationBeforeDeleteHooks = append(annotationBeforeDeleteHooks, annotationHook)
		annotationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		annotationAfterDeleteMu.Lock()
		annotationAfterDeleteHooks = append(annotationAfterDeleteHooks, annotationHook)
		annotationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		annotationBeforeUpsertMu.Lock()
		annotationBeforeUpsertHooks = append(annotationBeforeUpsertHooks, annotationHook)
		annotationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		annotationAfterUpsertMu.Lock()
		annotationAfterUpsertHooks = append(annotationAfterUpsertHooks, annotationHook)
		annotationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single annotation record from the query using the global executor.
func (q annotationQuery) OneG(ctx context.Context) (*Annotation, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single annotation record from the query.
func (q annotationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Annotation, error) {
	o := &Annotation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for annotations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Annotation records from the query using the global executor.
func (q annotationQuery) AllG(ctx context.Context) (AnnotationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Annotation records from the query.
func (q annotationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnnotationSlice, error) {
	var o []*Annotation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Annotation slice")
	}

	if len(annotationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Annotation records in the query using the global executor
func (q annotationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Annotation records in the query.
func (q annotationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count annotations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q annotationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q annotationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if annotations exists")
	}

	return count > 0, nil
}

// Annotations retrieves all the records using an executor.
func Annotations(mods ...qm.QueryMod) annotationQuery {
	mods = append(mods, qm.From("\"annotations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"annotations\".*"})
	}

	return annotationQuery{q}
}

// FindAnnotationG retrieves a single record by ID.
func FindAnnotationG(ctx context.Context, iD null.Int64, selectCols ...string) (*Annotation, error) {
	return FindAnnotation(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAnnotation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnnotation(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Annotation, error) {
	annotationObj := &Annotation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"annotations\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, annotationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from annotations")
	}

	if err = annotationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return annotationObj, err
	}

	return annotationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Annotation) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Annotation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no annotations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(annotationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	annotationInsertCacheMut.RLock()
	cache, cached := annotationInsertCache[key]
	annotationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			annotationAllColumns,
			annotationColumnsWithDefault,
			annotationColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, annotationGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(annotationType, annotationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(annotationType, annotationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"annotations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"annotations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into annotations")
	}

	if !cached {
		annotationInsertCacheMut.Lock()
		annotationInsertCache[key] = cache
		annotationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Annotation record using the global executor.
// See Update for more documentation.
func (o *Annotation) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Annotation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Annotation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	annotationUpdateCacheMut.RLock()
	cache, cached := annotationUpdateCache[key]
	annotationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			annotationAllColumns,
			annotationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, annotationGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update annotations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"annotations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, annotationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(annotationType, annotationMapping, append(wl, annotationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update annotations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for annotations")
	}

	if !cached {
		annotationUpdateCacheMut.Lock()
		annotationUpdateCache[key] = cache
		annotationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q annotationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q annotationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for annotations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for annotations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AnnotationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnnotationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), annotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"annotations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, annotationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in annotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all annotation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Annotation) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Annotation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no annotations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(annotationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	annotationUpsertCacheMut.RLock()
	cache, cached := annotationUpsertCache[key]
	annotationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			annotationAllColumns,
			annotationColumnsWithDefault,
			annotationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			annotationAllColumns,
			annotationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert annotations, could not build update column list")
		}

		ret := strmangle.SetComplement(annotationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(annotationPrimaryKeyColumns))
			copy(conflict, annotationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"annotations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(annotationType, annotationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(annotationType, annotationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert annotations")
	}

	if !cached {
		annotationUpsertCacheMut.Lock()
		annotationUpsertCache[key] = cache
		annotationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Annotation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Annotation) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Annotation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Annotation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Annotation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), annotationPrimaryKeyMapping)
	sql := "DELETE FROM \"annotations\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from annotations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for annotations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q annotationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q annotationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no annotationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from annotations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for annotations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AnnotationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnnotationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(annotationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), annotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"annotations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, annotationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from annotation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for annotations")
	}

	if len(annotationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Annotation) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Annotation provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Annotation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnnotation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnnotationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AnnotationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnnotationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnnotationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), annotationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"annotations\".* FROM \"annotations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, annotationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnnotationSlice")
	}

	*o = slice

	return nil
}

// AnnotationExistsG checks if the Annotation row exists.
func AnnotationExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return AnnotationExists(ctx, boil.GetContextDB(), iD)
}

// AnnotationExists checks if the Annotation row exists.
func AnnotationExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"annotations\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if annotations exists")
	}

	return exists, nil
}

// Exists checks if the Annotation row exists.
func (o *Annotation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AnnotationExists(ctx, exec, o.ID)
}
