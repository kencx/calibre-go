// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksLanguagesLink is an object representing the database table.
type BooksLanguagesLink struct {
	ID        null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book      int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	LangCode  int64      `boil:"lang_code" json:"lang_code" toml:"lang_code" yaml:"lang_code"`
	ItemOrder int64      `boil:"item_order" json:"item_order" toml:"item_order" yaml:"item_order"`

	R *booksLanguagesLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksLanguagesLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksLanguagesLinkColumns = struct {
	ID        string
	Book      string
	LangCode  string
	ItemOrder string
}{
	ID:        "id",
	Book:      "book",
	LangCode:  "lang_code",
	ItemOrder: "item_order",
}

var BooksLanguagesLinkTableColumns = struct {
	ID        string
	Book      string
	LangCode  string
	ItemOrder string
}{
	ID:        "books_languages_link.id",
	Book:      "books_languages_link.book",
	LangCode:  "books_languages_link.lang_code",
	ItemOrder: "books_languages_link.item_order",
}

// Generated where

var BooksLanguagesLinkWhere = struct {
	ID        whereHelpernull_Int64
	Book      whereHelperint64
	LangCode  whereHelperint64
	ItemOrder whereHelperint64
}{
	ID:        whereHelpernull_Int64{field: "\"books_languages_link\".\"id\""},
	Book:      whereHelperint64{field: "\"books_languages_link\".\"book\""},
	LangCode:  whereHelperint64{field: "\"books_languages_link\".\"lang_code\""},
	ItemOrder: whereHelperint64{field: "\"books_languages_link\".\"item_order\""},
}

// BooksLanguagesLinkRels is where relationship names are stored.
var BooksLanguagesLinkRels = struct {
}{}

// booksLanguagesLinkR is where relationships are stored.
type booksLanguagesLinkR struct {
}

// NewStruct creates a new relationship struct
func (*booksLanguagesLinkR) NewStruct() *booksLanguagesLinkR {
	return &booksLanguagesLinkR{}
}

// booksLanguagesLinkL is where Load methods for each relationship are stored.
type booksLanguagesLinkL struct{}

var (
	booksLanguagesLinkAllColumns            = []string{"id", "book", "lang_code", "item_order"}
	booksLanguagesLinkColumnsWithoutDefault = []string{"book", "lang_code"}
	booksLanguagesLinkColumnsWithDefault    = []string{"id", "item_order"}
	booksLanguagesLinkPrimaryKeyColumns     = []string{"id"}
	booksLanguagesLinkGeneratedColumns      = []string{"id"}
)

type (
	// BooksLanguagesLinkSlice is an alias for a slice of pointers to BooksLanguagesLink.
	// This should almost always be used instead of []BooksLanguagesLink.
	BooksLanguagesLinkSlice []*BooksLanguagesLink
	// BooksLanguagesLinkHook is the signature for custom BooksLanguagesLink hook methods
	BooksLanguagesLinkHook func(context.Context, boil.ContextExecutor, *BooksLanguagesLink) error

	booksLanguagesLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksLanguagesLinkType                 = reflect.TypeOf(&BooksLanguagesLink{})
	booksLanguagesLinkMapping              = queries.MakeStructMapping(booksLanguagesLinkType)
	booksLanguagesLinkPrimaryKeyMapping, _ = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, booksLanguagesLinkPrimaryKeyColumns)
	booksLanguagesLinkInsertCacheMut       sync.RWMutex
	booksLanguagesLinkInsertCache          = make(map[string]insertCache)
	booksLanguagesLinkUpdateCacheMut       sync.RWMutex
	booksLanguagesLinkUpdateCache          = make(map[string]updateCache)
	booksLanguagesLinkUpsertCacheMut       sync.RWMutex
	booksLanguagesLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksLanguagesLinkAfterSelectMu sync.Mutex
var booksLanguagesLinkAfterSelectHooks []BooksLanguagesLinkHook

var booksLanguagesLinkBeforeInsertMu sync.Mutex
var booksLanguagesLinkBeforeInsertHooks []BooksLanguagesLinkHook
var booksLanguagesLinkAfterInsertMu sync.Mutex
var booksLanguagesLinkAfterInsertHooks []BooksLanguagesLinkHook

var booksLanguagesLinkBeforeUpdateMu sync.Mutex
var booksLanguagesLinkBeforeUpdateHooks []BooksLanguagesLinkHook
var booksLanguagesLinkAfterUpdateMu sync.Mutex
var booksLanguagesLinkAfterUpdateHooks []BooksLanguagesLinkHook

var booksLanguagesLinkBeforeDeleteMu sync.Mutex
var booksLanguagesLinkBeforeDeleteHooks []BooksLanguagesLinkHook
var booksLanguagesLinkAfterDeleteMu sync.Mutex
var booksLanguagesLinkAfterDeleteHooks []BooksLanguagesLinkHook

var booksLanguagesLinkBeforeUpsertMu sync.Mutex
var booksLanguagesLinkBeforeUpsertHooks []BooksLanguagesLinkHook
var booksLanguagesLinkAfterUpsertMu sync.Mutex
var booksLanguagesLinkAfterUpsertHooks []BooksLanguagesLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksLanguagesLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksLanguagesLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksLanguagesLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksLanguagesLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksLanguagesLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksLanguagesLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksLanguagesLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksLanguagesLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksLanguagesLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLanguagesLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksLanguagesLinkHook registers your hook function for all future operations.
func AddBooksLanguagesLinkHook(hookPoint boil.HookPoint, booksLanguagesLinkHook BooksLanguagesLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksLanguagesLinkAfterSelectMu.Lock()
		booksLanguagesLinkAfterSelectHooks = append(booksLanguagesLinkAfterSelectHooks, booksLanguagesLinkHook)
		booksLanguagesLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksLanguagesLinkBeforeInsertMu.Lock()
		booksLanguagesLinkBeforeInsertHooks = append(booksLanguagesLinkBeforeInsertHooks, booksLanguagesLinkHook)
		booksLanguagesLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksLanguagesLinkAfterInsertMu.Lock()
		booksLanguagesLinkAfterInsertHooks = append(booksLanguagesLinkAfterInsertHooks, booksLanguagesLinkHook)
		booksLanguagesLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksLanguagesLinkBeforeUpdateMu.Lock()
		booksLanguagesLinkBeforeUpdateHooks = append(booksLanguagesLinkBeforeUpdateHooks, booksLanguagesLinkHook)
		booksLanguagesLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksLanguagesLinkAfterUpdateMu.Lock()
		booksLanguagesLinkAfterUpdateHooks = append(booksLanguagesLinkAfterUpdateHooks, booksLanguagesLinkHook)
		booksLanguagesLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksLanguagesLinkBeforeDeleteMu.Lock()
		booksLanguagesLinkBeforeDeleteHooks = append(booksLanguagesLinkBeforeDeleteHooks, booksLanguagesLinkHook)
		booksLanguagesLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksLanguagesLinkAfterDeleteMu.Lock()
		booksLanguagesLinkAfterDeleteHooks = append(booksLanguagesLinkAfterDeleteHooks, booksLanguagesLinkHook)
		booksLanguagesLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksLanguagesLinkBeforeUpsertMu.Lock()
		booksLanguagesLinkBeforeUpsertHooks = append(booksLanguagesLinkBeforeUpsertHooks, booksLanguagesLinkHook)
		booksLanguagesLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksLanguagesLinkAfterUpsertMu.Lock()
		booksLanguagesLinkAfterUpsertHooks = append(booksLanguagesLinkAfterUpsertHooks, booksLanguagesLinkHook)
		booksLanguagesLinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksLanguagesLink record from the query using the global executor.
func (q booksLanguagesLinkQuery) OneG(ctx context.Context) (*BooksLanguagesLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksLanguagesLink record from the query.
func (q booksLanguagesLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksLanguagesLink, error) {
	o := &BooksLanguagesLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_languages_link")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksLanguagesLink records from the query using the global executor.
func (q booksLanguagesLinkQuery) AllG(ctx context.Context) (BooksLanguagesLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksLanguagesLink records from the query.
func (q booksLanguagesLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksLanguagesLinkSlice, error) {
	var o []*BooksLanguagesLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksLanguagesLink slice")
	}

	if len(booksLanguagesLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksLanguagesLink records in the query using the global executor
func (q booksLanguagesLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksLanguagesLink records in the query.
func (q booksLanguagesLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_languages_link rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksLanguagesLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksLanguagesLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_languages_link exists")
	}

	return count > 0, nil
}

// BooksLanguagesLinks retrieves all the records using an executor.
func BooksLanguagesLinks(mods ...qm.QueryMod) booksLanguagesLinkQuery {
	mods = append(mods, qm.From("\"books_languages_link\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_languages_link\".*"})
	}

	return booksLanguagesLinkQuery{q}
}

// FindBooksLanguagesLinkG retrieves a single record by ID.
func FindBooksLanguagesLinkG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksLanguagesLink, error) {
	return FindBooksLanguagesLink(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksLanguagesLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksLanguagesLink(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksLanguagesLink, error) {
	booksLanguagesLinkObj := &BooksLanguagesLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_languages_link\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksLanguagesLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_languages_link")
	}

	if err = booksLanguagesLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksLanguagesLinkObj, err
	}

	return booksLanguagesLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksLanguagesLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksLanguagesLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_languages_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksLanguagesLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksLanguagesLinkInsertCacheMut.RLock()
	cache, cached := booksLanguagesLinkInsertCache[key]
	booksLanguagesLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksLanguagesLinkAllColumns,
			booksLanguagesLinkColumnsWithDefault,
			booksLanguagesLinkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksLanguagesLinkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_languages_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_languages_link\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_languages_link")
	}

	if !cached {
		booksLanguagesLinkInsertCacheMut.Lock()
		booksLanguagesLinkInsertCache[key] = cache
		booksLanguagesLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksLanguagesLink record using the global executor.
// See Update for more documentation.
func (o *BooksLanguagesLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksLanguagesLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksLanguagesLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksLanguagesLinkUpdateCacheMut.RLock()
	cache, cached := booksLanguagesLinkUpdateCache[key]
	booksLanguagesLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksLanguagesLinkAllColumns,
			booksLanguagesLinkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksLanguagesLinkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_languages_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_languages_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksLanguagesLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, append(wl, booksLanguagesLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_languages_link row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_languages_link")
	}

	if !cached {
		booksLanguagesLinkUpdateCacheMut.Lock()
		booksLanguagesLinkUpdateCache[key] = cache
		booksLanguagesLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksLanguagesLinkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksLanguagesLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_languages_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_languages_link")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksLanguagesLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksLanguagesLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLanguagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_languages_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLanguagesLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksLanguagesLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksLanguagesLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksLanguagesLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksLanguagesLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_languages_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksLanguagesLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksLanguagesLinkUpsertCacheMut.RLock()
	cache, cached := booksLanguagesLinkUpsertCache[key]
	booksLanguagesLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksLanguagesLinkAllColumns,
			booksLanguagesLinkColumnsWithDefault,
			booksLanguagesLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksLanguagesLinkAllColumns,
			booksLanguagesLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_languages_link, could not build update column list")
		}

		ret := strmangle.SetComplement(booksLanguagesLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksLanguagesLinkPrimaryKeyColumns))
			copy(conflict, booksLanguagesLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_languages_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksLanguagesLinkType, booksLanguagesLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_languages_link")
	}

	if !cached {
		booksLanguagesLinkUpsertCacheMut.Lock()
		booksLanguagesLinkUpsertCache[key] = cache
		booksLanguagesLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksLanguagesLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksLanguagesLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksLanguagesLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksLanguagesLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksLanguagesLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksLanguagesLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"books_languages_link\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_languages_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_languages_link")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksLanguagesLinkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksLanguagesLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksLanguagesLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_languages_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_languages_link")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksLanguagesLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksLanguagesLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksLanguagesLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLanguagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_languages_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLanguagesLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksLanguagesLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_languages_link")
	}

	if len(booksLanguagesLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksLanguagesLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksLanguagesLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksLanguagesLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksLanguagesLink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksLanguagesLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksLanguagesLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksLanguagesLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksLanguagesLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLanguagesLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_languages_link\".* FROM \"books_languages_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLanguagesLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksLanguagesLinkSlice")
	}

	*o = slice

	return nil
}

// BooksLanguagesLinkExistsG checks if the BooksLanguagesLink row exists.
func BooksLanguagesLinkExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksLanguagesLinkExists(ctx, boil.GetContextDB(), iD)
}

// BooksLanguagesLinkExists checks if the BooksLanguagesLink row exists.
func BooksLanguagesLinkExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_languages_link\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_languages_link exists")
	}

	return exists, nil
}

// Exists checks if the BooksLanguagesLink row exists.
func (o *BooksLanguagesLink) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksLanguagesLinkExists(ctx, exec, o.ID)
}
