// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LibraryID is an object representing the database table.
type LibraryID struct {
	ID   null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	UUID string     `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`

	R *libraryIDR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L libraryIDL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LibraryIDColumns = struct {
	ID   string
	UUID string
}{
	ID:   "id",
	UUID: "uuid",
}

var LibraryIDTableColumns = struct {
	ID   string
	UUID string
}{
	ID:   "library_id.id",
	UUID: "library_id.uuid",
}

// Generated where

var LibraryIDWhere = struct {
	ID   whereHelpernull_Int64
	UUID whereHelperstring
}{
	ID:   whereHelpernull_Int64{field: "\"library_id\".\"id\""},
	UUID: whereHelperstring{field: "\"library_id\".\"uuid\""},
}

// LibraryIDRels is where relationship names are stored.
var LibraryIDRels = struct {
}{}

// libraryIDR is where relationships are stored.
type libraryIDR struct {
}

// NewStruct creates a new relationship struct
func (*libraryIDR) NewStruct() *libraryIDR {
	return &libraryIDR{}
}

// libraryIDL is where Load methods for each relationship are stored.
type libraryIDL struct{}

var (
	libraryIDAllColumns            = []string{"id", "uuid"}
	libraryIDColumnsWithoutDefault = []string{"uuid"}
	libraryIDColumnsWithDefault    = []string{"id"}
	libraryIDPrimaryKeyColumns     = []string{"id"}
	libraryIDGeneratedColumns      = []string{"id"}
)

type (
	// LibraryIDSlice is an alias for a slice of pointers to LibraryID.
	// This should almost always be used instead of []LibraryID.
	LibraryIDSlice []*LibraryID
	// LibraryIDHook is the signature for custom LibraryID hook methods
	LibraryIDHook func(context.Context, boil.ContextExecutor, *LibraryID) error

	libraryIDQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	libraryIDType                 = reflect.TypeOf(&LibraryID{})
	libraryIDMapping              = queries.MakeStructMapping(libraryIDType)
	libraryIDPrimaryKeyMapping, _ = queries.BindMapping(libraryIDType, libraryIDMapping, libraryIDPrimaryKeyColumns)
	libraryIDInsertCacheMut       sync.RWMutex
	libraryIDInsertCache          = make(map[string]insertCache)
	libraryIDUpdateCacheMut       sync.RWMutex
	libraryIDUpdateCache          = make(map[string]updateCache)
	libraryIDUpsertCacheMut       sync.RWMutex
	libraryIDUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var libraryIDAfterSelectMu sync.Mutex
var libraryIDAfterSelectHooks []LibraryIDHook

var libraryIDBeforeInsertMu sync.Mutex
var libraryIDBeforeInsertHooks []LibraryIDHook
var libraryIDAfterInsertMu sync.Mutex
var libraryIDAfterInsertHooks []LibraryIDHook

var libraryIDBeforeUpdateMu sync.Mutex
var libraryIDBeforeUpdateHooks []LibraryIDHook
var libraryIDAfterUpdateMu sync.Mutex
var libraryIDAfterUpdateHooks []LibraryIDHook

var libraryIDBeforeDeleteMu sync.Mutex
var libraryIDBeforeDeleteHooks []LibraryIDHook
var libraryIDAfterDeleteMu sync.Mutex
var libraryIDAfterDeleteHooks []LibraryIDHook

var libraryIDBeforeUpsertMu sync.Mutex
var libraryIDBeforeUpsertHooks []LibraryIDHook
var libraryIDAfterUpsertMu sync.Mutex
var libraryIDAfterUpsertHooks []LibraryIDHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LibraryID) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LibraryID) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LibraryID) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LibraryID) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LibraryID) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LibraryID) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LibraryID) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LibraryID) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LibraryID) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range libraryIDAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLibraryIDHook registers your hook function for all future operations.
func AddLibraryIDHook(hookPoint boil.HookPoint, libraryIDHook LibraryIDHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		libraryIDAfterSelectMu.Lock()
		libraryIDAfterSelectHooks = append(libraryIDAfterSelectHooks, libraryIDHook)
		libraryIDAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		libraryIDBeforeInsertMu.Lock()
		libraryIDBeforeInsertHooks = append(libraryIDBeforeInsertHooks, libraryIDHook)
		libraryIDBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		libraryIDAfterInsertMu.Lock()
		libraryIDAfterInsertHooks = append(libraryIDAfterInsertHooks, libraryIDHook)
		libraryIDAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		libraryIDBeforeUpdateMu.Lock()
		libraryIDBeforeUpdateHooks = append(libraryIDBeforeUpdateHooks, libraryIDHook)
		libraryIDBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		libraryIDAfterUpdateMu.Lock()
		libraryIDAfterUpdateHooks = append(libraryIDAfterUpdateHooks, libraryIDHook)
		libraryIDAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		libraryIDBeforeDeleteMu.Lock()
		libraryIDBeforeDeleteHooks = append(libraryIDBeforeDeleteHooks, libraryIDHook)
		libraryIDBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		libraryIDAfterDeleteMu.Lock()
		libraryIDAfterDeleteHooks = append(libraryIDAfterDeleteHooks, libraryIDHook)
		libraryIDAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		libraryIDBeforeUpsertMu.Lock()
		libraryIDBeforeUpsertHooks = append(libraryIDBeforeUpsertHooks, libraryIDHook)
		libraryIDBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		libraryIDAfterUpsertMu.Lock()
		libraryIDAfterUpsertHooks = append(libraryIDAfterUpsertHooks, libraryIDHook)
		libraryIDAfterUpsertMu.Unlock()
	}
}

// OneG returns a single libraryID record from the query using the global executor.
func (q libraryIDQuery) OneG(ctx context.Context) (*LibraryID, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single libraryID record from the query.
func (q libraryIDQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LibraryID, error) {
	o := &LibraryID{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for library_id")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all LibraryID records from the query using the global executor.
func (q libraryIDQuery) AllG(ctx context.Context) (LibraryIDSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all LibraryID records from the query.
func (q libraryIDQuery) All(ctx context.Context, exec boil.ContextExecutor) (LibraryIDSlice, error) {
	var o []*LibraryID

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LibraryID slice")
	}

	if len(libraryIDAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all LibraryID records in the query using the global executor
func (q libraryIDQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all LibraryID records in the query.
func (q libraryIDQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count library_id rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q libraryIDQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q libraryIDQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if library_id exists")
	}

	return count > 0, nil
}

// LibraryIds retrieves all the records using an executor.
func LibraryIds(mods ...qm.QueryMod) libraryIDQuery {
	mods = append(mods, qm.From("\"library_id\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"library_id\".*"})
	}

	return libraryIDQuery{q}
}

// FindLibraryIDG retrieves a single record by ID.
func FindLibraryIDG(ctx context.Context, iD null.Int64, selectCols ...string) (*LibraryID, error) {
	return FindLibraryID(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindLibraryID retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLibraryID(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*LibraryID, error) {
	libraryIDObj := &LibraryID{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"library_id\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, libraryIDObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from library_id")
	}

	if err = libraryIDObj.doAfterSelectHooks(ctx, exec); err != nil {
		return libraryIDObj, err
	}

	return libraryIDObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *LibraryID) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LibraryID) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no library_id provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(libraryIDColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	libraryIDInsertCacheMut.RLock()
	cache, cached := libraryIDInsertCache[key]
	libraryIDInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			libraryIDAllColumns,
			libraryIDColumnsWithDefault,
			libraryIDColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, libraryIDGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(libraryIDType, libraryIDMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(libraryIDType, libraryIDMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"library_id\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"library_id\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into library_id")
	}

	if !cached {
		libraryIDInsertCacheMut.Lock()
		libraryIDInsertCache[key] = cache
		libraryIDInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single LibraryID record using the global executor.
// See Update for more documentation.
func (o *LibraryID) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the LibraryID.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LibraryID) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	libraryIDUpdateCacheMut.RLock()
	cache, cached := libraryIDUpdateCache[key]
	libraryIDUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			libraryIDAllColumns,
			libraryIDPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, libraryIDGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update library_id, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"library_id\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, libraryIDPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(libraryIDType, libraryIDMapping, append(wl, libraryIDPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update library_id row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for library_id")
	}

	if !cached {
		libraryIDUpdateCacheMut.Lock()
		libraryIDUpdateCache[key] = cache
		libraryIDUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q libraryIDQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q libraryIDQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for library_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for library_id")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LibraryIDSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LibraryIDSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), libraryIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"library_id\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, libraryIDPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in libraryID slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all libraryID")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *LibraryID) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LibraryID) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no library_id provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(libraryIDColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	libraryIDUpsertCacheMut.RLock()
	cache, cached := libraryIDUpsertCache[key]
	libraryIDUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			libraryIDAllColumns,
			libraryIDColumnsWithDefault,
			libraryIDColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			libraryIDAllColumns,
			libraryIDPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert library_id, could not build update column list")
		}

		ret := strmangle.SetComplement(libraryIDAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(libraryIDPrimaryKeyColumns))
			copy(conflict, libraryIDPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"library_id\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(libraryIDType, libraryIDMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(libraryIDType, libraryIDMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert library_id")
	}

	if !cached {
		libraryIDUpsertCacheMut.Lock()
		libraryIDUpsertCache[key] = cache
		libraryIDUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single LibraryID record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *LibraryID) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single LibraryID record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LibraryID) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LibraryID provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), libraryIDPrimaryKeyMapping)
	sql := "DELETE FROM \"library_id\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from library_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for library_id")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q libraryIDQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q libraryIDQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no libraryIDQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from library_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for library_id")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LibraryIDSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LibraryIDSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(libraryIDBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), libraryIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"library_id\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, libraryIDPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from libraryID slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for library_id")
	}

	if len(libraryIDAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *LibraryID) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no LibraryID provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LibraryID) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLibraryID(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LibraryIDSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty LibraryIDSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LibraryIDSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LibraryIDSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), libraryIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"library_id\".* FROM \"library_id\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, libraryIDPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LibraryIDSlice")
	}

	*o = slice

	return nil
}

// LibraryIDExistsG checks if the LibraryID row exists.
func LibraryIDExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return LibraryIDExists(ctx, boil.GetContextDB(), iD)
}

// LibraryIDExists checks if the LibraryID row exists.
func LibraryIDExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"library_id\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if library_id exists")
	}

	return exists, nil
}

// Exists checks if the LibraryID row exists.
func (o *LibraryID) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LibraryIDExists(ctx, exec, o.ID)
}
