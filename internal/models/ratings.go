// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Rating is an object representing the database table.
type Rating struct {
	ID     null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Rating null.Int64 `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	Link   string     `boil:"link" json:"link" toml:"link" yaml:"link"`

	R *ratingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ratingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RatingColumns = struct {
	ID     string
	Rating string
	Link   string
}{
	ID:     "id",
	Rating: "rating",
	Link:   "link",
}

var RatingTableColumns = struct {
	ID     string
	Rating string
	Link   string
}{
	ID:     "ratings.id",
	Rating: "ratings.rating",
	Link:   "ratings.link",
}

// Generated where

var RatingWhere = struct {
	ID     whereHelpernull_Int64
	Rating whereHelpernull_Int64
	Link   whereHelperstring
}{
	ID:     whereHelpernull_Int64{field: "\"ratings\".\"id\""},
	Rating: whereHelpernull_Int64{field: "\"ratings\".\"rating\""},
	Link:   whereHelperstring{field: "\"ratings\".\"link\""},
}

// RatingRels is where relationship names are stored.
var RatingRels = struct {
}{}

// ratingR is where relationships are stored.
type ratingR struct {
}

// NewStruct creates a new relationship struct
func (*ratingR) NewStruct() *ratingR {
	return &ratingR{}
}

// ratingL is where Load methods for each relationship are stored.
type ratingL struct{}

var (
	ratingAllColumns            = []string{"id", "rating", "link"}
	ratingColumnsWithoutDefault = []string{}
	ratingColumnsWithDefault    = []string{"id", "rating", "link"}
	ratingPrimaryKeyColumns     = []string{"id"}
	ratingGeneratedColumns      = []string{"id"}
)

type (
	// RatingSlice is an alias for a slice of pointers to Rating.
	// This should almost always be used instead of []Rating.
	RatingSlice []*Rating
	// RatingHook is the signature for custom Rating hook methods
	RatingHook func(context.Context, boil.ContextExecutor, *Rating) error

	ratingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ratingType                 = reflect.TypeOf(&Rating{})
	ratingMapping              = queries.MakeStructMapping(ratingType)
	ratingPrimaryKeyMapping, _ = queries.BindMapping(ratingType, ratingMapping, ratingPrimaryKeyColumns)
	ratingInsertCacheMut       sync.RWMutex
	ratingInsertCache          = make(map[string]insertCache)
	ratingUpdateCacheMut       sync.RWMutex
	ratingUpdateCache          = make(map[string]updateCache)
	ratingUpsertCacheMut       sync.RWMutex
	ratingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ratingAfterSelectMu sync.Mutex
var ratingAfterSelectHooks []RatingHook

var ratingBeforeInsertMu sync.Mutex
var ratingBeforeInsertHooks []RatingHook
var ratingAfterInsertMu sync.Mutex
var ratingAfterInsertHooks []RatingHook

var ratingBeforeUpdateMu sync.Mutex
var ratingBeforeUpdateHooks []RatingHook
var ratingAfterUpdateMu sync.Mutex
var ratingAfterUpdateHooks []RatingHook

var ratingBeforeDeleteMu sync.Mutex
var ratingBeforeDeleteHooks []RatingHook
var ratingAfterDeleteMu sync.Mutex
var ratingAfterDeleteHooks []RatingHook

var ratingBeforeUpsertMu sync.Mutex
var ratingBeforeUpsertHooks []RatingHook
var ratingAfterUpsertMu sync.Mutex
var ratingAfterUpsertHooks []RatingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rating) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rating) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rating) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rating) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rating) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rating) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rating) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rating) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rating) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRatingHook registers your hook function for all future operations.
func AddRatingHook(hookPoint boil.HookPoint, ratingHook RatingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ratingAfterSelectMu.Lock()
		ratingAfterSelectHooks = append(ratingAfterSelectHooks, ratingHook)
		ratingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ratingBeforeInsertMu.Lock()
		ratingBeforeInsertHooks = append(ratingBeforeInsertHooks, ratingHook)
		ratingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ratingAfterInsertMu.Lock()
		ratingAfterInsertHooks = append(ratingAfterInsertHooks, ratingHook)
		ratingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ratingBeforeUpdateMu.Lock()
		ratingBeforeUpdateHooks = append(ratingBeforeUpdateHooks, ratingHook)
		ratingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ratingAfterUpdateMu.Lock()
		ratingAfterUpdateHooks = append(ratingAfterUpdateHooks, ratingHook)
		ratingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ratingBeforeDeleteMu.Lock()
		ratingBeforeDeleteHooks = append(ratingBeforeDeleteHooks, ratingHook)
		ratingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ratingAfterDeleteMu.Lock()
		ratingAfterDeleteHooks = append(ratingAfterDeleteHooks, ratingHook)
		ratingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ratingBeforeUpsertMu.Lock()
		ratingBeforeUpsertHooks = append(ratingBeforeUpsertHooks, ratingHook)
		ratingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ratingAfterUpsertMu.Lock()
		ratingAfterUpsertHooks = append(ratingAfterUpsertHooks, ratingHook)
		ratingAfterUpsertMu.Unlock()
	}
}

// OneG returns a single rating record from the query using the global executor.
func (q ratingQuery) OneG(ctx context.Context) (*Rating, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single rating record from the query.
func (q ratingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rating, error) {
	o := &Rating{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ratings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Rating records from the query using the global executor.
func (q ratingQuery) AllG(ctx context.Context) (RatingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Rating records from the query.
func (q ratingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RatingSlice, error) {
	var o []*Rating

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Rating slice")
	}

	if len(ratingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Rating records in the query using the global executor
func (q ratingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Rating records in the query.
func (q ratingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ratings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q ratingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q ratingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ratings exists")
	}

	return count > 0, nil
}

// Ratings retrieves all the records using an executor.
func Ratings(mods ...qm.QueryMod) ratingQuery {
	mods = append(mods, qm.From("\"ratings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ratings\".*"})
	}

	return ratingQuery{q}
}

// FindRatingG retrieves a single record by ID.
func FindRatingG(ctx context.Context, iD null.Int64, selectCols ...string) (*Rating, error) {
	return FindRating(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRating retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRating(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Rating, error) {
	ratingObj := &Rating{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ratings\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ratingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ratings")
	}

	if err = ratingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ratingObj, err
	}

	return ratingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Rating) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rating) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ratings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ratingInsertCacheMut.RLock()
	cache, cached := ratingInsertCache[key]
	ratingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ratingAllColumns,
			ratingColumnsWithDefault,
			ratingColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, ratingGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ratingType, ratingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ratings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ratings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ratings")
	}

	if !cached {
		ratingInsertCacheMut.Lock()
		ratingInsertCache[key] = cache
		ratingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Rating record using the global executor.
// See Update for more documentation.
func (o *Rating) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Rating.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rating) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ratingUpdateCacheMut.RLock()
	cache, cached := ratingUpdateCache[key]
	ratingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ratingAllColumns,
			ratingPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, ratingGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ratings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ratings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ratingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, append(wl, ratingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ratings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ratings")
	}

	if !cached {
		ratingUpdateCacheMut.Lock()
		ratingUpdateCache[key] = cache
		ratingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q ratingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q ratingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ratings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RatingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RatingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ratings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rating")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Rating) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rating) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ratings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ratingUpsertCacheMut.RLock()
	cache, cached := ratingUpsertCache[key]
	ratingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ratingAllColumns,
			ratingColumnsWithDefault,
			ratingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ratingAllColumns,
			ratingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ratings, could not build update column list")
		}

		ret := strmangle.SetComplement(ratingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ratingPrimaryKeyColumns))
			copy(conflict, ratingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ratings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ratingType, ratingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ratings")
	}

	if !cached {
		ratingUpsertCacheMut.Lock()
		ratingUpsertCache[key] = cache
		ratingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Rating record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Rating) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Rating record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rating) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Rating provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ratingPrimaryKeyMapping)
	sql := "DELETE FROM \"ratings\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ratings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q ratingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q ratingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ratingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ratings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ratings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RatingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RatingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ratingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ratings")
	}

	if len(ratingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Rating) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Rating provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rating) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRating(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RatingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RatingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RatingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RatingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ratings\".* FROM \"ratings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RatingSlice")
	}

	*o = slice

	return nil
}

// RatingExistsG checks if the Rating row exists.
func RatingExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return RatingExists(ctx, boil.GetContextDB(), iD)
}

// RatingExists checks if the Rating row exists.
func RatingExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ratings\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ratings exists")
	}

	return exists, nil
}

// Exists checks if the Rating row exists.
func (o *Rating) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RatingExists(ctx, exec, o.ID)
}
