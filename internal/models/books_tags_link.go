// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BooksTagsLink is an object representing the database table.
type BooksTagsLink struct {
	ID   null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Book int64      `boil:"book" json:"book" toml:"book" yaml:"book"`
	Tag  int64      `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`

	R *booksTagsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksTagsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksTagsLinkColumns = struct {
	ID   string
	Book string
	Tag  string
}{
	ID:   "id",
	Book: "book",
	Tag:  "tag",
}

var BooksTagsLinkTableColumns = struct {
	ID   string
	Book string
	Tag  string
}{
	ID:   "books_tags_link.id",
	Book: "books_tags_link.book",
	Tag:  "books_tags_link.tag",
}

// Generated where

var BooksTagsLinkWhere = struct {
	ID   whereHelpernull_Int64
	Book whereHelperint64
	Tag  whereHelperint64
}{
	ID:   whereHelpernull_Int64{field: "\"books_tags_link\".\"id\""},
	Book: whereHelperint64{field: "\"books_tags_link\".\"book\""},
	Tag:  whereHelperint64{field: "\"books_tags_link\".\"tag\""},
}

// BooksTagsLinkRels is where relationship names are stored.
var BooksTagsLinkRels = struct {
}{}

// booksTagsLinkR is where relationships are stored.
type booksTagsLinkR struct {
}

// NewStruct creates a new relationship struct
func (*booksTagsLinkR) NewStruct() *booksTagsLinkR {
	return &booksTagsLinkR{}
}

// booksTagsLinkL is where Load methods for each relationship are stored.
type booksTagsLinkL struct{}

var (
	booksTagsLinkAllColumns            = []string{"id", "book", "tag"}
	booksTagsLinkColumnsWithoutDefault = []string{"book", "tag"}
	booksTagsLinkColumnsWithDefault    = []string{"id"}
	booksTagsLinkPrimaryKeyColumns     = []string{"id"}
	booksTagsLinkGeneratedColumns      = []string{"id"}
)

type (
	// BooksTagsLinkSlice is an alias for a slice of pointers to BooksTagsLink.
	// This should almost always be used instead of []BooksTagsLink.
	BooksTagsLinkSlice []*BooksTagsLink
	// BooksTagsLinkHook is the signature for custom BooksTagsLink hook methods
	BooksTagsLinkHook func(context.Context, boil.ContextExecutor, *BooksTagsLink) error

	booksTagsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksTagsLinkType                 = reflect.TypeOf(&BooksTagsLink{})
	booksTagsLinkMapping              = queries.MakeStructMapping(booksTagsLinkType)
	booksTagsLinkPrimaryKeyMapping, _ = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, booksTagsLinkPrimaryKeyColumns)
	booksTagsLinkInsertCacheMut       sync.RWMutex
	booksTagsLinkInsertCache          = make(map[string]insertCache)
	booksTagsLinkUpdateCacheMut       sync.RWMutex
	booksTagsLinkUpdateCache          = make(map[string]updateCache)
	booksTagsLinkUpsertCacheMut       sync.RWMutex
	booksTagsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksTagsLinkAfterSelectMu sync.Mutex
var booksTagsLinkAfterSelectHooks []BooksTagsLinkHook

var booksTagsLinkBeforeInsertMu sync.Mutex
var booksTagsLinkBeforeInsertHooks []BooksTagsLinkHook
var booksTagsLinkAfterInsertMu sync.Mutex
var booksTagsLinkAfterInsertHooks []BooksTagsLinkHook

var booksTagsLinkBeforeUpdateMu sync.Mutex
var booksTagsLinkBeforeUpdateHooks []BooksTagsLinkHook
var booksTagsLinkAfterUpdateMu sync.Mutex
var booksTagsLinkAfterUpdateHooks []BooksTagsLinkHook

var booksTagsLinkBeforeDeleteMu sync.Mutex
var booksTagsLinkBeforeDeleteHooks []BooksTagsLinkHook
var booksTagsLinkAfterDeleteMu sync.Mutex
var booksTagsLinkAfterDeleteHooks []BooksTagsLinkHook

var booksTagsLinkBeforeUpsertMu sync.Mutex
var booksTagsLinkBeforeUpsertHooks []BooksTagsLinkHook
var booksTagsLinkAfterUpsertMu sync.Mutex
var booksTagsLinkAfterUpsertHooks []BooksTagsLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksTagsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksTagsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksTagsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksTagsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksTagsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksTagsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksTagsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksTagsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksTagsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksTagsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksTagsLinkHook registers your hook function for all future operations.
func AddBooksTagsLinkHook(hookPoint boil.HookPoint, booksTagsLinkHook BooksTagsLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		booksTagsLinkAfterSelectMu.Lock()
		booksTagsLinkAfterSelectHooks = append(booksTagsLinkAfterSelectHooks, booksTagsLinkHook)
		booksTagsLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		booksTagsLinkBeforeInsertMu.Lock()
		booksTagsLinkBeforeInsertHooks = append(booksTagsLinkBeforeInsertHooks, booksTagsLinkHook)
		booksTagsLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		booksTagsLinkAfterInsertMu.Lock()
		booksTagsLinkAfterInsertHooks = append(booksTagsLinkAfterInsertHooks, booksTagsLinkHook)
		booksTagsLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		booksTagsLinkBeforeUpdateMu.Lock()
		booksTagsLinkBeforeUpdateHooks = append(booksTagsLinkBeforeUpdateHooks, booksTagsLinkHook)
		booksTagsLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		booksTagsLinkAfterUpdateMu.Lock()
		booksTagsLinkAfterUpdateHooks = append(booksTagsLinkAfterUpdateHooks, booksTagsLinkHook)
		booksTagsLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		booksTagsLinkBeforeDeleteMu.Lock()
		booksTagsLinkBeforeDeleteHooks = append(booksTagsLinkBeforeDeleteHooks, booksTagsLinkHook)
		booksTagsLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		booksTagsLinkAfterDeleteMu.Lock()
		booksTagsLinkAfterDeleteHooks = append(booksTagsLinkAfterDeleteHooks, booksTagsLinkHook)
		booksTagsLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		booksTagsLinkBeforeUpsertMu.Lock()
		booksTagsLinkBeforeUpsertHooks = append(booksTagsLinkBeforeUpsertHooks, booksTagsLinkHook)
		booksTagsLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		booksTagsLinkAfterUpsertMu.Lock()
		booksTagsLinkAfterUpsertHooks = append(booksTagsLinkAfterUpsertHooks, booksTagsLinkHook)
		booksTagsLinkAfterUpsertMu.Unlock()
	}
}

// OneG returns a single booksTagsLink record from the query using the global executor.
func (q booksTagsLinkQuery) OneG(ctx context.Context) (*BooksTagsLink, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single booksTagsLink record from the query.
func (q booksTagsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksTagsLink, error) {
	o := &BooksTagsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for books_tags_link")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BooksTagsLink records from the query using the global executor.
func (q booksTagsLinkQuery) AllG(ctx context.Context) (BooksTagsLinkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BooksTagsLink records from the query.
func (q booksTagsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksTagsLinkSlice, error) {
	var o []*BooksTagsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksTagsLink slice")
	}

	if len(booksTagsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BooksTagsLink records in the query using the global executor
func (q booksTagsLinkQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BooksTagsLink records in the query.
func (q booksTagsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count books_tags_link rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q booksTagsLinkQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q booksTagsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if books_tags_link exists")
	}

	return count > 0, nil
}

// BooksTagsLinks retrieves all the records using an executor.
func BooksTagsLinks(mods ...qm.QueryMod) booksTagsLinkQuery {
	mods = append(mods, qm.From("\"books_tags_link\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"books_tags_link\".*"})
	}

	return booksTagsLinkQuery{q}
}

// FindBooksTagsLinkG retrieves a single record by ID.
func FindBooksTagsLinkG(ctx context.Context, iD null.Int64, selectCols ...string) (*BooksTagsLink, error) {
	return FindBooksTagsLink(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBooksTagsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksTagsLink(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*BooksTagsLink, error) {
	booksTagsLinkObj := &BooksTagsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"books_tags_link\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, booksTagsLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from books_tags_link")
	}

	if err = booksTagsLinkObj.doAfterSelectHooks(ctx, exec); err != nil {
		return booksTagsLinkObj, err
	}

	return booksTagsLinkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BooksTagsLink) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksTagsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_tags_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksTagsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksTagsLinkInsertCacheMut.RLock()
	cache, cached := booksTagsLinkInsertCache[key]
	booksTagsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksTagsLinkAllColumns,
			booksTagsLinkColumnsWithDefault,
			booksTagsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, booksTagsLinkGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"books_tags_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"books_tags_link\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into books_tags_link")
	}

	if !cached {
		booksTagsLinkInsertCacheMut.Lock()
		booksTagsLinkInsertCache[key] = cache
		booksTagsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BooksTagsLink record using the global executor.
// See Update for more documentation.
func (o *BooksTagsLink) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BooksTagsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksTagsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksTagsLinkUpdateCacheMut.RLock()
	cache, cached := booksTagsLinkUpdateCache[key]
	booksTagsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksTagsLinkAllColumns,
			booksTagsLinkPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, booksTagsLinkGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update books_tags_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"books_tags_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksTagsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, append(wl, booksTagsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update books_tags_link row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for books_tags_link")
	}

	if !cached {
		booksTagsLinkUpdateCacheMut.Lock()
		booksTagsLinkUpdateCache[key] = cache
		booksTagsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q booksTagsLinkQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q booksTagsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for books_tags_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for books_tags_link")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BooksTagsLinkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksTagsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksTagsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"books_tags_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksTagsLinkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksTagsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksTagsLink")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BooksTagsLink) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BooksTagsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no books_tags_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksTagsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	booksTagsLinkUpsertCacheMut.RLock()
	cache, cached := booksTagsLinkUpsertCache[key]
	booksTagsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			booksTagsLinkAllColumns,
			booksTagsLinkColumnsWithDefault,
			booksTagsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			booksTagsLinkAllColumns,
			booksTagsLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert books_tags_link, could not build update column list")
		}

		ret := strmangle.SetComplement(booksTagsLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(booksTagsLinkPrimaryKeyColumns))
			copy(conflict, booksTagsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"books_tags_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(booksTagsLinkType, booksTagsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert books_tags_link")
	}

	if !cached {
		booksTagsLinkUpsertCacheMut.Lock()
		booksTagsLinkUpsertCache[key] = cache
		booksTagsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BooksTagsLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BooksTagsLink) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BooksTagsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksTagsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksTagsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksTagsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"books_tags_link\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from books_tags_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for books_tags_link")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q booksTagsLinkQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q booksTagsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksTagsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from books_tags_link")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_tags_link")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BooksTagsLinkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksTagsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksTagsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksTagsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"books_tags_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksTagsLinkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksTagsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for books_tags_link")
	}

	if len(booksTagsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BooksTagsLink) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BooksTagsLink provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksTagsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksTagsLink(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksTagsLinkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BooksTagsLinkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksTagsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksTagsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksTagsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"books_tags_link\".* FROM \"books_tags_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksTagsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksTagsLinkSlice")
	}

	*o = slice

	return nil
}

// BooksTagsLinkExistsG checks if the BooksTagsLink row exists.
func BooksTagsLinkExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return BooksTagsLinkExists(ctx, boil.GetContextDB(), iD)
}

// BooksTagsLinkExists checks if the BooksTagsLink row exists.
func BooksTagsLinkExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"books_tags_link\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if books_tags_link exists")
	}

	return exists, nil
}

// Exists checks if the BooksTagsLink row exists.
func (o *BooksTagsLink) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BooksTagsLinkExists(ctx, exec, o.ID)
}
